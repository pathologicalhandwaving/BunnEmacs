#+TITLE: BunnEmacs
#+AUTHOR: Kris Short
#+DATE_CREATED: [2020-07-06]
#+DATE_MODIFIED: [2020-07-07]


* Startup


** Startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inital-scratch-message "")
#+END_SRC

** Startup Garbage Collection Reduced
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000)
#+END_SRC

** Package Management

** Disable site-run-file
#+BEGIN_SRC emacs-lisp
(setq site-run-file nil)
#+END_SRC

** Package Archives
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq-default
  load-prefer-newer t
  package-enabled-at-startup nil)
  (add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

** =use-package=
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package t))
(setq-default
        use-package-always-defer t
        use-package-always-ensure t)
#+END_SRC

** Ensure Latest Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib)
#+END_SRC


* Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-language-environment "UTF-8")
#+END_SRC


* UI

** Bar Modes
#+BEGIN_SRC emacs-lisp
(menu-bar-mode +1)
(tool-bar-mode 0)
(tooltip-mode 1)
#+END_SRC

*** Scroll-bar Mode
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(setq scroll-margin 0
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
#+END_SRC

** Highlight Current Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(line-number-mode +1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
#+END_SRC

** Full Screen
#+BEGIN_SRC emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 85))
(add-to-list 'default-frame-alist '(alpha 85 85))
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(font . "Fira-Code-13"))
(add-to-list 'default-frame-alist '(font . "Fira-Code-13"))
(set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji" nil 'prepend)
#+END_SRC

** Fringe

** Scroll-bars

** MacOS
*** TODO Move to Keybindings
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default
   exec-path (append exec-path '("/usr/local/bin"))   ; homebrew path
   ns-command-modifier 'meta                          ; meta to CMD
   ns-option-modifier 'super                          ; super to ALT
   ns-right-option-modifier nil))                     ; disable right ALT
#+END_SRC

* Exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :hook (after-init . exec-path-from-shell-initialize))
#+END_SRC

* Garbage Collection

** If not in focus, garbage collect
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

* Large File Warning
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

* Directories
#+BEGIN_SRC emacs-lisp
(defvar bunny-dir (file-name-directory load-file-name)
  "Root Directory of BunnEmacs Distribution")
(defvar bunny-vendor-dir (expand-file-name "vendor" bunny-dir)
  "Directory for packages not available in archives")
(defvar bunny-savefile-dir (expand-file-name "savefile" bunny-dir)
  "Directory to store history files")
(defvar bunny-personal-dir (expand-file-name "personal" bunny-dir)
  "Directory for personal configuration")
(unless (file-exists-p bunny-savefile dir)
        (make-directory bunny-savefile-dir))
#+END_SRC


* Load Files

** Add Subfolders to load-path
#+BEGIN_SRC emacs-lisp
(defun bunny-add-subfolders-to-load-path (parent-dir)
  "Add all level PARENT-DIR subdirectories to the `load-path`"
  (dolist (f (directory-files parent-dir)))
    (let ((name (expand-file-name f parent-dir)))
      (when (and (file-directory-p name)
                 (not (string-prefix-p "." f)))
            (add-to-list 'load-path name)
            (bunny-add-subfolders-to-load-path name))))
(add-to-list 'load-path bunny-vendor-dir)
(add-to-list 'load-path bunny-personal-dir)
(bunny-add-subfolders-to-load-path bunny-vendor-dir)
#+END_SRC


** Load =custom.el=
Enable use of customization interface in GUI Emacs.
Customization is automatically appened to the end of =init.el= by default, we don't want to do this it fucks shit up.
Tell Emacs to add extra shit to another file that will be loaded if it exists.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" bunny-personal-dir)
(when (file-exists-p bunny-personal-dir)
  (message "Loading personal carrots in %s..." bunny-personal-dir)
  (mapc 'load (directory-files bunny-personal-dir 't "^[^#\.].\\.el$")))
#+END_SRC


** Load =.secret.el=
Keep secret shit out of version control.
API tokens live here.
You should customize =user-full-name= and =user-mail-address=.

#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

* History and Backup File Management

** Store backup and autosave files in tmp
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(setq backup-directory-alist
  '((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
  '((".*" . ,temporary-file-directory)))
(setq undo-tree-auto-save-history t)
#+END_SRC

** Revert buffers automatically when underlying files are externally changed
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC


** Remember last location in file
#+BEGIN_SRC emacs-lisp
(setq save-place-file (expand-file-name "saveplace" bunny-savefile-dir))
(save-place-mode 1)
#+END_SRC
* Editor

** Newline at end of file
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

* Server
#+BEGIN_SRC emacs-lisp
(unless (server-running-p) (server-start))
#+END_SRC


* Languages

** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :custom (css-indent-offset 2))

(use-package scss-mode
  :ensure nil
  :preface
  (defun bunny/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :mode ("\\.sass\\'"" "\\.scss\\'")
  :hook (scss-mode . bunny/scss-set-comment-style))
#+END_SRC

** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :config (setq-default csv-default csv-align-padding 2))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'")
#+END_SRC

** HTML
HTML mode is defined in =sgml-mode.el=

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :preface
  (defun bunny/html-set-pretty-print-function ()
    (setq bunny/pretty-print-function #'sgml-pretty-print))
  :hook
  ((html-mode . bunny/html-set-pretty-print-function)
   (html-mode . sgml-electric-tag-pair-mode)
   (html-mode . sgml-name-8bit-mode)
   (html-mode . toggle-truncate-lines))
  :custom
  (sgml-basic-offset 2))
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :preface
  (defun bunny/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :hook (json-mode . bunny/json-set-indent-level))
#+END_SRC

** JavaScript

#+BEGIN_SRC
#+END_SRC

** LaTeX

#+BEGIN_SRC
#+END_SRC

** Lisp

#+BEGIN_SRC
#+END_SRC

** Markdown

#+BEGIN_SRC
#+END_SRC

** Org

#+BEGIN_SRC
#+END_SRC

** Python

#+BEGIN_SRC
#+END_SRC

** SML

#+BEGIN_SRC
#+END_SRC

** YAML

#+BEGIN_SRC
#+END_SRC


* Theme

#+BEGIN_SRC
#+END_SRC

*** Mode-Line
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :demand t
  :custom
  (doom-modeline-buffer-file-name-style 'relative-to-project)
  (doom-modeline-enable-word-count t)
  (doom-modeline-icon t)
  (doom-modeline-percent-position nil)
  (doom-modeline-vcs-max-length 28)
  :config
  (doom-modeline-def-segment buffer-default-directory
    "The buffer directory"
    (let* ((active (doom-modelne--active))
           (face (if active 'doom-modeline-buffer-path 'mode-line-inactive)))
      (concat (doom-modeline-spc))))
              (propertize (abberviate-file-name default-directory) 'face face)
              (doom-modeline-spc))))
    (doom-modeline-def-segment bunny/buffer-name
      "The buffer name"
      (concat (doom-modeline-spc) (doom-modeline--buffer-name) (doom-modeline-spc)))
    (doom-modeline-def-segment bunny/buffer-name-simple
      "simple buffer name"
      (let* ((active (doom-modeline--active))
             (face (cond ((and buffer-file-name (buffer-modified-p)) 'doom-modeline-buffer-modified)
                         (active 'doom-modeline-buffer-file)
                         (t 'mode-line-inactive))))
      (concat (doom-modeline-spc) (propertize "%b" 'face face) (doom-modeline-spc))))
    (doom-modeline-def-segment bunny/buffer-position
      "buffer position"
      (let* ((active (doom-modeline--active))
             (face (if active 'mode-line 'mode-line-inactive)))
        (propertize (concat (doom-modeline-spc) (format-mode-line "%l:%c") (doom-modeline-spc))
                    'face face)))
    (doom-modeline-def-segment bunny/major-mode
    "current major mode"
        (let* ((active (doom-modeline--active))
           (face (if active 'doom-modeline-buffer-major-mode 'mode-line-inactive)))
      (propertize (concat (doom-modeline-spc) mode-name (doom-modeline-spc))
                  'face face)))
  (doom-modeline-def-segment me/vcs
    "The version control system information."
    (when-let ((branch doom-modeline--vcs-text))
      (let ((active (doom-modeline--active))
            (text (concat ":" branch)))
        (concat (doom-modeline-spc)
                (if active text (propertize text 'face 'mode-line-inactive))
                (doom-modeline-spc)))))
  (doom-modeline-mode 1)
  (doom-modeline-def-modeline 'info
    '(bar me/buffer-name info-nodes bunny/buffer-position selection-info))
  (doom-modeline-def-modeline 'main
    '(bar me/buffer-name remote-host bunny/buffer-position checker selection-info))
  (doom-modeline-def-modeline 'message
    '(bar me/buffer-name-simple bunny/buffer-position selection-info))
  (doom-modeline-def-modeline 'project
    '(bar buffer-default-directory))
  (doom-modeline-def-modeline 'special
    '(bar me/buffer-name bunny/buffer-position selection-info))
  (doom-modeline-def-modeline 'vcs
    '(bar me/buffer-name remote-host bunny/buffer-position selection-info)))
#+END_SRC

**** Nyan-Mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :custom
  (nyan-cat-face-number 4)
  (nyan-animate-nyancat t)
  :hook
  (doom-modeline-mode . nyan-mode))
#+END_SRC

* Features

** Alert
#+BEGIN_SRC
#+END_SRC

** Auto-Complete
#+BEGIN_SRC
#+END_SRC

** Comments
#+BEGIN_SRC
#+END_SRC

** Customization Menus
#+BEGIN_SRC
#+END_SRC

** Daemon
#+BEGIN_SRC
#+END_SRC

** Dictionary
#+BEGIN_SRC
#+END_SRC

** Diff
#+BEGIN_SRC
#+END_SRC

** Dired
#+BEGIN_SRC
#+END_SRC

** Expand
#+BEGIN_SRC
#+END_SRC

** Help
#+BEGIN_SRC
#+END_SRC

** Keybindings
#+BEGIN_SRC
#+END_SRC

** Linters
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook
  ((css-mode . flycheck-mode)
   (emacs-lisp-mode . flycheck-mode)
   (js-mode . flycheck-mode)
   (python-mode . flycheck-mode)
   (latex-mode . flycheck-mode)
   (json-mode . flycheck-mode)
   (tex-mode . flycheck-mode))
   :custom
   (flycheck-check-syntax-automatically '(save mode-enabled))
   (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
   (flycheck-display-error-delay .3))
#+END_SRC


** Navigation
#+BEGIN_SRC emacs-lisp

#+END_SRC


** Parentheses

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Paste
#+BEGIN_SRC emacs-lisp
(use-package webpaste)
#+END_SRC

** Version Control
#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :preface
  (defun bunny/git-commit-auto-fill-everywhere ()
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nill))
  :hook
  (git-commit-mode . bunny/git-commit-auto-fill-everywhere)
  :custom
  (git-commit-summary-max-length 50))
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (:map magit-hunk-section-map
    ("RET" . magit-diff-visit-file-other-window)
    ([return] . magit-diff-visit-file-other-window))
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-highlight-hunk-body nil)
  (magit-diff-highlight-hunk-region-dim-outside magit-diff-highlight-hunk-region-using-face))
  (magit-popup-display-buffer-action '((display-buffer-same-window)))
  (magit-refs-show-commit-count 'all)
  (magit-section-show-child-count t)
  :config
  (remove-hook 'magit-section-highlight-hook #'magit-section-highlight))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook
  ((prog-mode . whitespace-turn-on)
   (text-mode . whitespace-turn-on))
  :custom
  (whitespace-style '(face empty indentation::space tab trailing)))
#+END_SRC


