#+TITLE: BunnEmacs
#+AUTHOR: Kris Short
#+CATEGORY: Config
#+DATE_CREATED: [2020-07-06]
#+DATE_MODIFIED: [2020-07-15]


* Load Files

** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC


** Load =.secrets.el=


#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name "secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC



* Startup Options

** Initial Size and Position
#+begin_src emacs-lisp
(setq initial-frame-alist '((width . 120)
                            (height . 30)
                            (left . 50)
                            (top . 50)))
#+end_

** Dashboard
#+begin_src emacs-lisp
(require 'dashboard)
(setq initial-buffer-choice 'helm-recentf)
(setq dashboard-startup-banner "~/.emacs.d/logo.png")
(setq dashboard-banner-logo-title "Welcome to BunnEmacs Dashboard!")
(setq dashboard-show-shortcuts nil)
(setq dashboard-set-file-icons t)
(setq dashboard-set-navigator t)
(dashboard-setup-startup-hook)
#+end_src


** Startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Scratch Message
#+BEGIN_SRC emacs-lisp
(setq-default initial-scratch-message "")
#+END_SRC

** Bar Modes
#+BEGIN_SRC emacs-lisp
(menu-bar-mode +1)
(tool-bar-mode -1)
(tooltip-mode +1)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(size-indication-mode t)
#+END_SRC

** Scroll-bar Mode
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(setq scroll-margin 3
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
#+END_SRC


** Highlight Current Line
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-hl-line-mode)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(line-number-mode +1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
#+END_SRC

** Wrapping
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

*** Do not trunate lines and word wrap
#+begin_src emacs-lisp
(set-default 'truncate-lines nil)
(set-default 'word-wrap t)
(setq helm-buffers-truncate-lines nil)
#+end_src

** Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
#+END_SRC


** Exec Path From Shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Garbage Collection
*** If not in focus, garbage collect
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Large File Warning
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Yes-or-No
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Editing
*** Use spaces
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

*** Newline at end of file
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Security
#+begin_src emacs-lisp
(progn
(setq org-confirm-babel-evaluate nil)
(setq org-confirm-elisp-link-function nil)
(setq org-confirm-shell-link-function nil))
#+end_src

** Server


** Lisp APIs
Package dependencies providing modern APIs for working with lisp structures

#+begin_src emacs-lisp
(require 'cl-lib)
(use-package f :demand t)        ; files
(use-package dash :demand t)     ; lists
(use-package ht :demand t)       ; hash-tables
(use-package s :demand t)        ; strings
(use-package a :demand t)        ; association lists
(use-package anaphora :demand t) ; enables temp variables
#+end_src

** Directory Variables

*** Home Directory Variables
#+begin_src emacs-lisp
(defvar bunny-home-dir (expand-file-name "~/"))
(defvar bunny-emacs-dir (concat bunny-home-dir ".emacs.d/"))
(defvar bunny-librarian (concat bunny-home-dir "Librarian/"))
(defvar bunny-pictures-dir (concat bunny-home-dir "Pictures/"))
(defvar bunny-movies-dir (concat bunny-home-dir "Movies/"))
(defvar bunny-music-dir (concat bunny-home-dir "Music/"))
(defvar bunny-progz-dir (concat bunny-home-dir "Progz/"))
(defvar bunny-repos-dir (concat bunny-home-dir "Repos/"))
(defvar bunny-sites-dir (concat bunny-home-dir "Sites/"))
(defvar bunny-torrents-dir (concat bunny-home-dir "Torrents/"))
(defvar bunny-org-dir (concat bunny-home-dir "OrgDB/"))

#+end_src

*** OrgDB Directory Variables
#+begin_src emacs-lisp
(defvar bunny-adhd-dir (concat bunny-org-dir "ADHD/"))
(defvar bunny-archive-dir (concat bunny-org-dir "Archive/"))
(defvar bunny-code-dir (concat bunny-org-dir "Code/"))
(defvar bunny-dmp-dir (concat bunny-org-dir "DMP/"))
(defvar bunny-invest-dir (concat bunny-org-dir "Investigations/"))
(defvar bunny-inbox-dir (concat bunny-org-dir "Inbox/"))
(defvar bunny-lldb-dir (concat bunny-org-dir "LLDB/"))
(defvar bunny-lists-dir (concat bunny-org-dir "Lists/"))
(defvar bunny-logs-dir (concat bunny-org-dir "Logs/"))
(defvar bunny-notes-dir (concat bunny-org-dir "Notes/"))
(defvar bunny-paperless-dir (concat bunny-org-dir "Paperless/"))
(defvar bunny-projects-dir (concat bunny-org-dir "Projects/"))
(defvar bunny-tmp-dir (concat bunny-org-dir "TMP/"))
(defvar bunny-templates-dir (concat bunny-org-dir "Templates/"))
(defvar bunny-work-dir (concat bunny-org-dir "Work/"))
#+end_src

*** Librarian Directory Variables
#+begin_src emacs-lisp
(defvar bunny-articles-dir (concat bunny-librarian "Articles/"))
(defvar bunny-bib-dir (concat bunny-librarian "Bibliography/"))
(defvar bunny-data-dir (concat bunny-librarian "Data/"))
(defvar bunny-dictionary-dir (concat bunny-librarian "Dictionary/"))
(defvar bunny-legis-dir (concat bunny-librarian "Legis/"))
(defvar bunny-pdfs-dir (concat bunny-librarian "PDFs/"))
(defvar bunny-quotes-dir (concat bunny-librarian "Quotes/"))
(defvar bunny-text-dir (concat bunny-librarian "Text/"))
(defvar bunny-webarchives-dir (concat bunny-librarian "WebArchives/"))
(defvar bunny-epubs-dir (concat bunny-librarian "ePubs/"))
#+end_src

*** Movies Directory Variables
#+begin_src emacs-lisp
(defvar bunny-films-dir (concat bunny-movies-dir "Films/"))
(defvar bunny-lectures-dir (concat bunny-movies-dir "Lectures/"))
(defvar bunny-tv-dir (concat bunny-movies-dir "TV/"))
(defvar bunny-talks-dir (concat bunny-movies-dir "Talks/"))
#+end_src

*** Music Directory Variables
#+begin_src emacs-lisp
(defvar bunny-audiobooks-dir (concat bunny-music-dir "AudioBooks/"))
(defvar bunny-songs-dir (concat bunny-music-dir "Music/"))
(defvar bunny-sounds-dir (concat bunny-music-dir "Sounds/"))
#+end_src

*** Sites Directory Variables
#+begin_src emacs-lisp
(defvar bunny-content-dir (concat bunny-sites-dir "Content/"))
(defvar bunny-devl-dir (concat bunny-sites-dir "Devl/"))
(defvar bunny-drafts-dir (concat bunny-sites-dir "Drafts/"))
(defvar bunny-production-dir (concat bunny-sites-dir "Production/"))
#+end_src

** File Variables
*** Create file-name variable relative to org directory
#+begin_src emacs-lisp
(defun bunny-org-file-name (file-name)
"Create file-name relative to bunny-org-dir"
(concat bunny-org-dir file-name))
#+end_src

*** Create file-name variable relative to librarian directory
#+begin_src emacs-lisp
(defun bunny-librarian-file-name (file-name)
"Create file-name relative to bunny-librarian directory"
(concat bunny-librarian file-name))
#+end_src


*** notes-file
#+begin_src emacs-lisp
(defvar bunny-notes-file
(bunny-org-file-name "Notes/notes.org")
"Notes catcher file-name")
#+end_src

*** inbox-file
#+begin_src emacs-lisp
(defvar bunny-inbox-file
(bunny-org-file-name "Inbox/inbox.org")
"Inbox catcher file-name")
#+end_src

*** agenda-file
#+begin_src emacs-lisp
(defvar bunny-agenda-file
(bunny-org-file-name "Inbox/agenda.org")
"Agenda catcher file-name")
#+end_src

*** ideas-file
#+begin_src emacs-lisp
(defvar bunny-ideas-file
(bunny-org-file-name "Inbox/ideas.org")
"Ideas catcher file-name")
#+end_src

*** todos-file
#+begin_src emacs-lisp
(defvar bunny-todos-file
(bunny-org-file-name "Inbox/todos.org")
"Todos catcher file-name")
#+end_src

*** recipes-file
#+begin_src emacs-lisp
(defvar bunny-recipes-file
(bunny-org-file-name "Inbox/recipes.org")
"Recipes file-name")
#+end_src

*** remember-file
#+BEGIN_SRC emacs-lisp
(defvar bunny-remember-file
(bunny-org-file-name "Inbox/remember.org")
"remember file-name")
#+END_SRC

*** routine-file
#+begin_src emacs-lisp
(defvar bunny-routine-file
(bunny-org-file-name "Inbox/routine.org")
"routine file-name")
#+end_src

*** holidays-file
#+begin_src emacs-lisp
(defvar bunny-holidays-file
(bunny-org-file-name "Inbox/holidays.org")
"Holidays file-name")
#+end_src

*** log-file
#+begin_src emacs-lisp
(defvar bunny-log-file
(bunny-org-file-name "Logs/log.org")
"Log catcher file-name")
#+end_src

*** investigations-file
#+begin_src emacs-lisp
(defvar bunny-invest-file
(bunny-org-file-name "Investigations/investigations.org")
"Investigations list file-name")
#+end_src

*** lldb-file
#+begin_src emacs-lisp
(defvar bunny-lldb-file
(bunny-org-file-name "LLDB/lldb.org")
"LLDB file-name")
#+end_src

*** Lists Index File
#+begin_src emacs-lisp
(defvar bunny-lists-index-file
(bunny-org-file-name "Lists/index.org")
"Lists index file-name")
#+end_src

*** projects-list-file
#+begin_src emacs-lisp
(defvar bunny-project-list-file
(bunny-org-file-name "Projects/projects.org")
"Projects list file-name")
#+end_src

*** Templates Index File
#+begin_src emacs-lisp
(defvar bunny-templates-index-file
(bunny-org-file-name "Templates/index.org")
"Templates index file-name")
#+end_src

*** Observations File
#+begin_src emacs-lisp
(defvar bunny-observations-file
(bunny-org-file-name "Logs/observations.org")
"observations file-name")
#+end_src

*** PDFs Index File
#+begin_src emacs-lisp
(defvar bunny-pdfs-index-file
(bunny-librarian-file-name "PDFs/index.org")
"PDFs Index file-name")
#+end_src

*** Articles Index File
#+begin_src emacs-lisp
(defvar bunny-articles-index-file
(bunny-librarian-file-name "Articles/index.org")
"Articles Index file-name")
#+end_src

*** Data Index File
#+begin_src emacs-lisp
(defvar bunny-data-index-file
(bunny-librarian-file-name "Data/index.org")
"Data Index file-name")
#+end_src

*** Dictionary Index File
#+begin_src emacs-lisp
(defvar bunny-dictionary-index-file
(bunny-librarian-file-name "Dictionary/index.org")
"Dictionary Index file-name")
#+end_src

*** Legis Index File
#+begin_src emacs-lisp
(defvar bunny-legis-index-file
(bunny-librarian-file-name "Legis/index.org")
"Legis Index file-name")
#+end_src

*** Quotes Index File
#+begin_src emacs-lisp
(defvar bunny-quotes-index-file
(bunny-librarian-file-name "Quotes/index.org")
"Quotes Index file-name")
#+end_src

*** Text Index File
#+begin_src emacs-lisp
(defvar bunny-text-index-file
(bunny-librarian-file-name "Text/index.org")
"Text Index file-name")
#+end_src

*** ePubs Index File
#+begin_src emacs-lisp
(defvar bunny-epubs-index-file
(bunny-librarian-file-name "ePubs/index.org")
"ePubs Index file-name")
#+end_src

*** feeds.org
#+begin_src emacs-lisp
(defvar bunny-elfeed-org-files
(bunny-librarian-file-name "feeds.org")
"feeds.org file-name")
#+end_src

*** ADHD Log
#+begin_src emacs-lisp
(defvar bunny-adhd-log-file 
(bunny-org-file-name "ADHD/log.org")
"ADHD log file-name")
#+end_src


* MacOS UI
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(modify-frame-parameters (selected-frame) '((alpha . 75)))
(add-to-list 'default-frame-alist '(alpha 85 85))
#+END_SRC

** Meta
#+BEGIN_SRC emacs-lisp
(setq ns-function-modifer 'hyper)
#+END_SRC

** Swap meta and super
#+BEGIN_SRC emacs-lisp
(setq mac-option-modifer 'meta)
(setq mac-command-modifer 'super)
#+END_SRC


* Theme

** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind ("C-x n" . neotree-toggle)
  :config
  (setq neo-smart-open t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Default Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-neotree-config)
  (setq doom-neotree-enable-file-icons t)
  (setq doom-neotree-enable-chevron-icons t)
  (setq doom-neotree-enable-type-colors t)
  (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'doom-outrun-electric t)
#+END_SRC



** Nyan-Mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :config
  (nyan-mode 1)
  (nyan-toggle-wavy-trail)
  (nyan-start-animation))
#+END_SRC


** Parens
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC


* Keybinds

** GoTo Next Window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x o") (lambda ()
                                (interactive)
				(other-window -1)))
#+END_SRC


** Replace buffer menu with ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Symbol Insert
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c M-3") (lambda () (interactive) (insert "§")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c M-4") (lambda () (interactive) (insert "↯")))
#+END_SRC


** Delete Frame
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'delete-frame)
#+END_SRC

** Copy Mouse Selected Text Automatically
#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

** Orgmode
*** agenda
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

*** capture
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC



* Help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :bind
  (:map help-mode-map
        ("<" . help-go-back)
        (">" . help-go-forward)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :config
  (global-eldoc-mode -1))
#+END_SRC


* Expand
** Helm
#+begin_src emacs-lisp
(use-package helm
  :diminish
  :init (helm-mode t)
  :bind (("M-x" . helm-M-x)
	     ("C-x C-f" . helm-find-files)
	     ("C-x b" . helm-mini)
	     ("C-x C-r" . helm-recentf)
	     ("C-c i" . helm-imenu)
	     ("M-y" . helm-show-kill-ring)
	     ("C-c o" . helm-occur)
	     ("C-x r b" . helm-bookmarks)
	     ("C-c R" . helm-register))
  :config
  (helm-autoresize-mode 1))
#+end_src


*** Helm-Org
#+begin_src emacs-lisp
(use-package helm-org
  :config
  (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags)))
#+end_src


*** Helm-Themes
#+begin_src emacs-lisp
(use-package helm-themes)
#+end_src

*** Helm-descbinds
#+begin_src emacs-lisp
(use-package helm-descbinds
  :demand
  :config
  (helm-descbinds-mode))
#+end_src

*** Helm-org-rifle
#+begin_src emacs-lisp
(use-package helm-org-rifle
  :after (helm org)
  :commands helm-org-rifle-current-buffer
  :config
  (define-key org-mode-map (kbd "M-r") 'helm-org-rifle-current-buffer))
#+end_src

** YaSnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+END_SRC

** Auto-Complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("<right>" . company-complete-common))
  :hook
  (after-init . global-company-mode)
  :custom
  (company-dabbrev-downcase nil)
  (company-idle-delay .2)
  (company-minimum-prefix-length 2)
  (company-tooltip-limit 10)
  (company-show-numbers t)
  (company-require-match nil)
  (company-tooltip-align-annotations t)
  (company-tooltip-flip-when-above t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-company-mode 1)
#+END_SRC

** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (setq which-key-popup-type 'minibuffer)
  (setq which-key-frame-max-height 20)
  (which-key-mode +1))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package smex
  :bind
  ("M-x" . 'smex)
  ("M-X" . 'smex-major-mode-commands)
  :config
  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize))
#+END_SRC

** Crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)
	     ("C-c u" . crux-view-url)
	     ("C-c k" . crux-kill-other-buffers)
	     ("C-c i" . crux-ispell-word-then-abbrev)
	     ("C-x C-u" . crux-upcase-region)
	     ("C-x C-l" . crux-downcase-region)
	     ("C-c r" . crux-rename-file-and-buffer)
	     ("C-c D" . crux-delete-file-and-buffer)
	     ("C-k" . crux-smart-kill-line)))
#+END_SRC

** Abbrev
#+BEGIN_SRC emacs-lisp
(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/abbreviations.el")
(quietly-read-abbrev-file)
#+END_SRC


* Search

** Dictionary
#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

** Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate)
#+END_SRC


** Google-This
#+BEGIN_SRC emacs-lisp
(use-package google-this
  :config
  (google-this-mode 1))
#+BEGIN_SRC 


* Utilities

** Ewww
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

** pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :pin manual
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
  (setq pdf-view-resize-factor 1.1)
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
  (with-eval-after-load "pdf-annot"
    (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<return>") 'pdf-annot-edit-contents-commit)
    (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<S-return>") 'newline)
    (advice-add 'pdf-annot-edit-contents-commit :after 'emd/save-buffer-no-args)))
#+END_SRC

** org-pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package org-pdftools
  :hook (org-load . org-pdftools-setup-link))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC

** Bookmarks
#+BEGIN_SRC emacs-lisp
(use-package ebuku)
#+END_SRC

*** bm visible bookmarks
#+BEGIN_SRC emacs-lisp
(use-package bm
  :bind (("<C-f2>" . bm-toggle)
         ("<f2>" . bm-next)
	 ("<S-f2>" . bm-previous)))
#+END_SRC

*** Helm-bookmarks
#+begin_src emacs-lisp
(with-eval-after-load 'helm
(require 'helm-bookmark)
(global-set-key (kbd "C-x C-b") 'helm-bookmark))
#+end_src

*** eBuku
#+begin_src emacs-lisp
(setq ebuku-buku-path "/usr/local/bin/buku")
(setq ebuku-database-path "/Users/emd/.local/share/buku/bookmarks.db")
#+end_src
** Kill
#+BEGIN_SRC emacs-lisp
(use-package easy-kill)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap kill-ring-save] 'easy-kill)
  (global-set-key [remap mark-sexp] 'easy-mark)
#+END_SRC


** Clipboard
Save current system clipboard to kill-ring
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** wttrin
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-cities '("Durham,NC")))
#+END_SRC


** AutoSave
#+begin_src emacs-lisp
(setq auto-save-default t)
#+end_src

Autosave every 30 seconds
#+begin_src emacs-lisp
(setq auto-save-timeout 30)
#+end_src

Auto save after 30 typed characters
#+BEGIN_SRC emacs-lisp
(setq auto-save-interval 30)
#+END_SRC

Autosaves in same place
#+begin_src emacs-lisp
(defvar emacs-autosave-directory
(concat user-emacs-directory "autosaves/"))
(unless (file-exists-p emacs-autosave-directory)
(make-directory emacs-autosave-directory))
#+end_src

** Backups
Set backups directory
#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,emacs-autosave-directory)))
#+end_src

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t)
(setq kept-new-versions 10)
(setq kept-old-versions 0)
(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
#+END_SRC

Backup after every save
#+begin_src emacs-lisp
(use-package backup-each-save
  :config (add-hook 'after-save-hook 'backup-each-save))
#+end_src

** Scratch Buffer
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

** Volatile Highlights
Temporarily highlight changes to buffer after pasting
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC


** Structure Templates
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC




* Languages
  
** BibTeX



** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :custom (css-indent-offset 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :ensure nil
  :preface
  (defun bunny/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :mode ("\\.sass\\'" "\\.scss\\'")
  :hook (scss-mode . bunny/scss-set-comment-style))
#+END_SRC


** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC


** Colors
Colorize colors as text with their value
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :custom
  (rainbow-x-colors-major-mode-list '()))
#+END_SRC


** Comments
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("<M-return>" . comment-indent-new-line)
  :custom
  (comment-auto-fill-only-comments t)
  (comment-multi-line t))
#+END_SRC


** Diff
#+BEGIN_SRC emacs-lisp
(use-package ediff-wind
  :ensure nil
  :custom
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC


** HTML
HTML mode is defined in =sgml-mode.el=

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :preface
  (defun bunny/html-set-pretty-print-function ()
    (setq bunny/pretty-print-function #'sgml-pretty-print))
  :hook
  ((html-mode . bunny/html-set-pretty-print-function)
   (html-mode . sgml-electric-tag-pair-mode)
   (html-mode . sgml-name-8bit-mode)
   (html-mode . toggle-truncate-lines))
  :custom
  (sgml-basic-offset 2))
#+END_SRC


** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :preface
  (defun bunny/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :hook (json-mode . bunny/json-set-indent-level))
#+END_SRC


** LaTeX

*** Highlight LaTeX in Org
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex bibtex))
#+END_SRC


** Lisp
#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
#+END_SRC


** OrgMode
*** Startup
#+begin_src emacs-lisp
(setq org-directory "~/OrgDB")
(setq org-default-notes-file (concat org-directory "/Notes/notes.org"))
#+end_src

  #+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  #+END_SRC
**** Indented
   #+begin_src emacs-lisp
   (require 'org-indent)
   (setq org-startup-indented t)
   #+end_src
**** Truncated
#+begin_src emacs-lisp
(setq org-startup-truncated nil)
#+end_src

**** Folded
#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src

*** Archives
#+begin_src emacs-lisp
(setq org-archive-location "~/OrgDB/Archive")
#+end_src

*** Babel
**** TODO Add plantuml path

 =(setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.3/libexec/plantuml.jar")=

*** Capture
#+begin_src emacs-lisp
(setq org-capture-templates
  '(("t" "ToDo" entry (file+headline "~/OrgDB/Inbox/todos.org" "ToDos")
     "** TODO %?\n %i\n %a"))) 
#+end_src

*** Refile
*** Grammar and Spelling
**** Dont spell check these regions
 #+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
 #+END_SRC

*** Layout
**** Modify demote bullets
 #+BEGIN_SRC emacs-lisp
(setq org-list-demote-modify-bullet '(("-" . "+")
                                      ("+" . "*")
				      ("*" . "-")))
 #+END_SRC

**** hide emphasis markers
 #+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
 #+END_SRC

**** org-src block fontify
 #+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0)
(setq org-src-preserve-indentation t)
 #+END_SRC

**** fontify headlines
 #+BEGIN_SRC emacs-lisp
(setq org-fontify-whole-headline t)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
(setq org-fontify-done-headline t)
 #+END_SRC

**** fontify quote and verse blocks
 #+BEGIN_SRC emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)
 #+END_SRC

**** Maximize description list indent
 #+BEGIN_SRC emacs-lisp
(setq org-list-description-max-indent 5)
 #+END_SRC

**** Checkbox Stats
#+begin_src emacs-lisp
(setq org-checkbox-hierarchical-statistics nil)
#+end_src

*** Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
	      (sequence "FIXME" "|" "FIXED")
        (sequence "ADD" "|" "ADDED")
        (sequence "REMOVE" "|" "REMOVED")
        (sequence "MOVE" "|" "MOVED")))
#+end_src

*** Agenda
**** Warn if deadline within next 7 days
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 7)
#+END_SRC

**** Show all tasks due in next two weeks
#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 7)
#+END_SRC

**** Dont show tasks as scheduled if they are categorized with a deadline
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
#+END_SRC

**** Priority 
 #+BEGIN_SRC emacs-lisp
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)
 #+END_SRC

*** Org Files

default directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "/Users/emd/OrgDB/")
#+END_SRC

Agenda file

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-directory))
#+END_SRC

Notes file

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/Notes/notes.org"))
#+END_SRC

*** Refile
#+begin_src emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-targets '((nil :maxlevel . 9)
			         (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path '(file))
#+end_src

*** Utilities
**** PopOrg
 #+BEGIN_SRC emacs-lisp
(use-package poporg
  :bind (("C-c /" . poporg-dwim)))
 #+END_SRC



** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :hook (python-mode . turn-on-prettify-symbols-mode))
#+END_SRC


** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'"))
#+END_SRC
