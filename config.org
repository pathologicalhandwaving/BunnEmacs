#+TITLE: BunnEmacs
#+AUTHOR: Kris Short
#+DATE_CREATED: [2020-07-06]
#+DATE_MODIFIED: [2020-07-07]


* Startup


** Startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inital-scratch-message nil)
#+END_SRC



* Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
#+END_SRC


* UI

** Bar Modes
#+BEGIN_SRC emacs-lisp
(menu-bar-mode +1)
(tool-bar-mode 0)
(tooltip-mode 1)
#+END_SRC

*** Scroll-bar Mode
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(setq scroll-margin 0
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
#+END_SRC

** Highlight Current Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(line-number-mode +1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
#+END_SRC

** Full Screen

** Transparency
#+BEGIN_SRC emacs-lisp
(modify-frame-parameters (selected-frame) '((alpha . 75)))
(add-to-list 'default-frame-alist '(alpha 85 85))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC

** Fringe

** Scroll-bars

** MacOS
*** TODO Move to Keybindings
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default
   exec-path (append exec-path '("/usr/local/bin"))   ; homebrew path
   ns-command-modifier 'meta                          ; meta to CMD
   ns-option-modifier 'super                          ; super to ALT
   ns-right-option-modifier nil))                     ; disable right ALT
#+END_SRC

* Exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :hook (after-init . exec-path-from-shell-initialize))
#+END_SRC

* Garbage Collection

** If not in focus, garbage collect
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

* Large File Warning
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Load =custom.el=
Enable use of customization interface in GUI Emacs.
Customization is automatically appened to the end of =init.el= by default, we don't want to do this it fucks shit up.
Tell Emacs to add extra shit to another file that will be loaded if it exists.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC


** Load =.secret.el=
Keep secret shit out of version control.
API tokens live here.
You should customize =user-full-name= and =user-mail-address=.

#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

* History and Backup File Management


** Revert buffers automatically when underlying files are externally changed
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC


** Remember last location in file

* Editor

** Newline at end of file
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC



* Languages

** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :custom (css-indent-offset 2))

(use-package scss-mode
  :ensure nil
  :preface
  (defun bunny/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :mode ("\\.sass\\'" "\\.scss\\'")
  :hook (scss-mode . bunny/scss-set-comment-style))
#+END_SRC

** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'")
#+END_SRC

** HTML
HTML mode is defined in =sgml-mode.el=

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :preface
  (defun bunny/html-set-pretty-print-function ()
    (setq bunny/pretty-print-function #'sgml-pretty-print))
  :hook
  ((html-mode . bunny/html-set-pretty-print-function)
   (html-mode . sgml-electric-tag-pair-mode)
   (html-mode . sgml-name-8bit-mode)
   (html-mode . toggle-truncate-lines))
  :custom
  (sgml-basic-offset 2))
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :preface
  (defun bunny/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :hook (json-mode . bunny/json-set-indent-level))
#+END_SRC

** JavaScript


** LaTeX

*** AUCTeX
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :ensure t
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
#+END_SRC

*** RefTeX
#+BEGIN_SRC emacs-lisp
(use-package reftex
  :ensure t)
#+END_SRC

*** pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :pin manual
  :config
  (pdf-tools-install))
#+END_SRC

** Lisp
#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :preface
  :mode
  ("INSTALL\'"
   "CONTRIBUTORS\\'"
   "LICENSE\\'"
   "README\\'"
   "\\.markdown\\'"
   "\\.md\\'")
  :custom
  (markdown-asymmetric-header t)
  (markdown-split-window-direction 'right)
  :config
  (unbind-key "M-<down>" markdown-mode-map)
  (unbind-key "M-<up>" markdown-mode-map))
#+END_SRC

** Org

#+BEGIN_SRC
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :hook (python-mode . turn-on-prettify-symbols-mode))
#+END_SRC

** SML

#+BEGIN_SRC
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'"))
#+END_SRC


* Theme
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :config
  (all-the-icons-install-fonts))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-them 'doom-outrun-electric t)
  (doom-themes-neotree-config)
  (doom-themes-org-config))
#+END_SRC

** Mode-Line
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :demand t)
#+END_SRC

**** Nyan-Mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :custom
  (nyan-cat-face-number 4)
  (nyan-animate-nyancat t)
  :hook
  (doom-modeline-mode . nyan-mode))
#+END_SRC

* Features

** Alert
#+BEGIN_SRC emacs-lisp
(use-package alert
  :config
  (when (eq system-type 'darwin)
    (setq-default alert-default-style 'osx-notifier)))
#+END_SRC

** Auto-Complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("<right>" . company-complete-common))
  :hook
  (after-init . global-company-mode)
  :custom
  (company-dabbrev-downcase nil)
  (company-idle-delay .2)
  (company-minimum-prefix-length 1)
  (company-require-match nil)
  (company-tooltip-align-annotations t))
#+END_SRC

** Auto-Fill
#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :hook
  ((prog-mode . turn-on-auto-fill)
   (text-mode . turn-on-auto-fill)))
#+END_SRC

** Comments
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("<M-return>" . comment-indent-new-line)
  :custom
  (comment-auto-fill-only-comments t)
  (comment-multi-line t))
#+END_SRC

** Customization Menus


** Colors
Colorize colors as text with their value
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :custom
  (rainbow-x-colors-major-mode-list '()))
#+END_SRC

** Daemon
Start serveer to edit editable elements in Chrome Browser from Emacs
#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :hook
  (after-init . edit-server-start))
#+END_SRC

** Dictionary
#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

*** Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate)
#+END_SRC

** Diff
#+BEGIN_SRC emacs-lisp
(use-package ediff-wind
  :ensure nil
  :custom
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC

** Dired


** Expand
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :bind
  (:map yas-minor-mode-map
        ("TAB" . nil)
        ([tab] . nil))
  :hook
  ((emacs-lisp-mode . yas-minor-mode)
   (html-mode . yas-minor-mode)
   (latex-mode . yas-minor-mode)
   (org-mode . yas-minor-mode)
   (python-mode . yas-minor-mode))
   :custom
   (yas-snippet-dirs '("/Users/emd/.emacs.d/snippets/"))
   (yas-verbosity 2)
   :config
   (yas-reload-all))
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :bind
  (:map help-mode-map
        ("<" . help-go-back)
        (">" . help-go-forward)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :config
  (global-eldoc-mode -1))
#+END_SRC

** Keybindings

** Linters
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook
  ((css-mode . flycheck-mode)
   (emacs-lisp-mode . flycheck-mode)
   (python-mode . flycheck-mode)
   (latex-mode . flycheck-mode)
   (json-mode . flycheck-mode)
   (tex-mode . flycheck-mode))
   :custom
   (flycheck-check-syntax-automatically '(save mode-enabled))
   (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
   (flycheck-display-error-delay .3))
#+END_SRC


** Navigation



** Parentheses

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

** Paste
#+BEGIN_SRC emacs-lisp
(use-package webpaste)
#+END_SRC

** Version Control
#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :preface
  (defun bunny/git-commit-auto-fill-everywhere ()
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nill))
  :hook
  (git-commit-mode . bunny/git-commit-auto-fill-everywhere)
  :custom
  (git-commit-summary-max-length 50))
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (:map magit-hunk-section-map
    ("RET" . magit-diff-visit-file-other-window)
    ([return] . magit-diff-visit-file-other-window)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+END_SRC

** Shell
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :bind (("C-t" . shell-pop))
  :config
  (setq shell-pop-default-director "/Users/emd/git")
  (setq shell-pop-term-shell "/bin/bash")
  (setq shell-pop-window-size 30)
  (setq shell-pop-full-span t)
  (setq shell-pop-window-position "top")
  (setq shell-pop-autocd-to-working-dir t)
  (setq shell-pop-cleanup-buffer-at-process-exit t))
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook
  ((prog-mode . whitespace-turn-on)
   (text-mode . whitespace-turn-on)))
#+END_SRC


