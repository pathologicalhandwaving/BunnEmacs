#+TITLE: BunnEmacs
#+AUTHOR: PathologicalHandwaving
#+CATEGORY: Config
#+DATE_CREATED: [2020-07-06]
#+DATE_MODIFIED: [2020-08-12]

*BunnEmacs* is an opinionated, MacOS centric emacs configuration.
Developed under MacOS Catalina 10.15.6 using *Emacs* 28 HEAD (see README for installation steps).

By default it launches via emacsclient using a [[https://www.hammerspoon.org/][Hammerspoon]] keybinding (see details in README).

BunnEmacs is still in development but works great so far! Suggestions welcome!

BunnEmacs use-cases are focused on note taking, pdf annotation, and academic style research and development work with heavy use of embedded LaTeX code and shell scripts.
 
*NOTE:* BunnEmacs does not focus on org-export to LaTeX as a preference and uses LaTeX templates for academic document creation and referencing.

* Load Files

** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC


** Load =.secrets.el=
To encrypt a whole file using gnupg make the first line in the file:
#+begin_verse
# -\*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-
#+end_verse
without the "\" before the first star

#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name "secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC



* Startup Options

** Initial Size and Position
Startup in center of current screen

#+begin_src emacs-lisp
(defun bun-set-initial-frame ()
  (let* ((base-factor 0.70)
         (a-width (* (display-pixel-width) base-factor))
         (a-height (* (display-pixel-height) base-factor))
         (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
         (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
    (set-frame-position (selected-frame) a-left a-top)
    (set-frame-size (selected-frame) (truncate a-width) (truncate a-height) t)))
(setq frame-resize-pixelwise t)
(bun-set-initial-frame)
#+end_src

** Startup Buffer

** Startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Scratch Message
#+BEGIN_SRC emacs-lisp
(setq-default initial-scratch-message "")
#+END_SRC

** Bar Modes
#+BEGIN_SRC emacs-lisp
(menu-bar-mode +1)
(tool-bar-mode -1)
(tooltip-mode +1)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(size-indication-mode t)
#+END_SRC

** Scroll-bar Mode
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(setq scroll-margin 3
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
#+END_SRC

** Highlight Current Line
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-hl-line-mode)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(line-number-mode +1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
#+END_SRC

** Wrapping
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

*** Do not trunate lines and word wrap
#+begin_src emacs-lisp
(set-default 'truncate-lines nil)
(set-default 'word-wrap t)
(setq helm-buffers-truncate-lines nil)
#+end_src

** Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
#+END_SRC

** Exec Path From Shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Garbage Collection
*** If not in focus, garbage collect
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Large File Warning
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Yes-or-No
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Editing
*** Use spaces
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

*** Newline at end of file
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Security
#+begin_src emacs-lisp
(progn
(setq org-confirm-babel-evaluate nil)
(setq org-confirm-elisp-link-function nil)
(setq org-confirm-shell-link-function nil))
#+end_src

** Server

** Lisp APIs
Package dependencies providing modern APIs for working with lisp structures

#+begin_src emacs-lisp
(require 'cl-lib)
(use-package f :demand t)        ; files
(use-package dash :demand t)     ; lists
(use-package ht :demand t)       ; hash-tables
(use-package s :demand t)        ; strings
(use-package a :demand t)        ; association lists
(use-package anaphora :demand t) ; enables temp variables
#+end_src

** Directory Variables
** File Variables
** Golden Ratio
#+begin_src emacs-lisp
(use-package golden-ratio
  :ensure t
  :config
  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t)
  (setq golden-ratio-max-width 72))
#+end_src


* MacOS UI
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(modify-frame-parameters (selected-frame) '((alpha . 75)))
(add-to-list 'default-frame-alist '(alpha 85 85))
#+END_SRC

** Meta
#+BEGIN_SRC emacs-lisp
(setq ns-function-modifer 'hyper)
#+END_SRC

** Swap meta and super
#+BEGIN_SRC emacs-lisp
(setq mac-option-modifer 'meta)
(setq mac-command-modifer 'super)
#+END_SRC


* Theme

** Default Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-neotree-config)
  (setq doom-neotree-enable-file-icons t)
  (setq doom-neotree-enable-chevron-icons t)
  (setq doom-neotree-enable-type-colors t)
  (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'doom-nord t)
#+END_SRC

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay 0.5
          treemacs-directory-name-transformer #'identity
          treemacs-display-in-side-window t
          treemacs-eldoc-display t
          treemacs-file-event-delay 5000
          treemacs-file-extension-regex treemacs-last-period-regex-value
          treemacs-file-follow-delay 0.2
          treemacs-file-name-transformer #'identity
          treemacs-follow-after-init t
          treemacs-git-command-pipe ""
          treemacs-goto-tag-strategy 'refetch-index
          treemacs-indentation 2
          treemacs-indentation-string " "
          treemacs-is-never-other-window nil
          treemacs-max-git-entries 5000
          treemacs-missing-project-action 'ask
          treemacs-moce-forward-on-expand nil
          treemacs-no-png-images nil
          treemacs-no-delete-other-windows t
          treemacs-project-follow-cleanup nil
          treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position 'left
          treemacs-recenter-distance 0.1
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow nil
          treemacs-show-cursor nil
          treemacs-show-hidden-files t
          treemacs-silent-filewatch nil
          treemacs-silent-refresh nil
          treemacs-sorting 'alphabetic-asc
          treemacs-space-between-root-nodes t
          treemacs-tag-follow-cleanup t
          treemacs-tag-follow-delay 1.5
          treemacs-user-mode-line-format nil
          treemacs-user-header-line-format nil
          treemacs-width 35
          treemacs-workspace-switch-cleanup nil)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0" . treemacs-select-window)
        ("C-x t 1" . treemacs-delete-other-windows)
        ("C-x t t" . treemacs)
        ("C-x t B" . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+end_src

#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package treemacs-all-the-icons)
#+end_src

#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+end_src

#+begin_src emacs-lisp
(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src


** Nyan-Mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :config
  (nyan-mode 1)
  (nyan-toggle-wavy-trail)
  (nyan-start-animation))
#+END_SRC

** Parens
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src


* Keybinds

** GoTo Next Window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x o") (lambda ()
                                (interactive)
				(other-window -1)))
#+END_SRC


** Replace buffer menu with ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Symbol Insert
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c M-3") (lambda () (interactive) (insert "ยง")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c M-4") (lambda () (interactive) (insert "โฏ")))
#+END_SRC


** Delete Frame
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'delete-frame)
#+END_SRC

** Copy Mouse Selected Text Automatically
#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

** Orgmode
*** agenda
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

*** capture
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC



* Help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :bind
  (:map help-mode-map
        ("<" . help-go-back)
        (">" . help-go-forward)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :config
  (global-eldoc-mode -1))
#+END_SRC

#+begin_src emacs-lisp
(require 'dash-docs)
(setq dash-docs-browser-func 'eww)
#+end_src

* Expand
** Helm
#+begin_src emacs-lisp
(use-package helm
  :diminish
  :init (helm-mode t)
  :bind (("M-x" . helm-M-x)
	     ("C-x C-f" . helm-find-files)
	     ("C-x b" . helm-mini)
	     ("C-x C-r" . helm-recentf)
	     ("C-c i" . helm-imenu)
	     ("M-y" . helm-show-kill-ring)
	     ("C-c o" . helm-occur)
	     ("C-x r b" . helm-bookmarks)
	     ("C-c R" . helm-register))
  :config
  (helm-autoresize-mode 1))
#+end_src

#+begin_src emacs-lisp
(require 'helm-config)
#+end_src

*** helm-icons
#+begin_src emacs-lisp
(require 'helm-icons)
(helm-icons-enable)
#+end_src

*** Helm-Org
#+begin_src emacs-lisp
(use-package helm-org
  :config
  (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags)))
#+end_src

*** Helm-Themes
#+begin_src emacs-lisp
(use-package helm-themes)
#+end_src

*** Helm-descbinds
#+begin_src emacs-lisp
(use-package helm-descbinds
  :demand
  :config
  (helm-descbinds-mode))
#+end_src

*** Helm-org-rifle
#+begin_src emacs-lisp
(use-package helm-org-rifle
  :after (helm org)
  :commands helm-org-rifle-current-buffer
  :config
  (define-key org-mode-map (kbd "M-r") 'helm-org-rifle-current-buffer))
#+end_src

*** Helm-ls-git
#+begin_src emacs-lisp
(require 'helm-ls-git)
(global-set-key (kbd "C-x C-d") 'helm-browse-project)
(global-set-key (kbd "C-x r p") 'helm-projects-history)
#+end_src

** Company Mode
#+begin_src emacs-lisp
(require 'map)
(require 'org)
(require 'seq)
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

#+begin_src emacs-lisp
(defvar company-org-block-bol-p t
"If t, detect completion when at begining of line, otherwise detect completion anywhere.")
#+end_src

#+begin_src emacs-lisp
(defvar company-org--regexp "<\\([[^ ]*\\)")
#+end_src

#+begin_src emacs-lisp
(defun company-org-block (command &optional arg &rest ignore)
  "Complete org babel languages into source blocks."
  (interactive (list 'interactive))
  (cl-case command
    (interactive (company-begin-backend 'company-org-block))
    (prefix (when (derived-mode-p 'org-mode)
              (company-org-block--grab-symbol-cons)))
    (candidates (company-org-block--candidates arg))
    (post-completion
     (company-org-block--expand arg))))
#+end_src

#+begin_src emacs-lisp
(defun company-org-block--candidates (prefix)
  "Return a list of org babel languages matching PREFIX."
  (seq-filter (lambda (language)
                (string-prefix-p prefix language))
              ;; Flatten `org-babel-load-languages' and
              ;; `org-structure-template-alist', join and sort.
              (seq-sort
               #'string-lessp
               (append
                (mapcar #'prin1-to-string
                        (map-keys org-babel-load-languages))
                (map-values org-structure-template-alist)))))
#+end_src

#+begin_src emacs-lisp
(defun company-org-block--template-p (template)
  (seq-contains (map-values org-structure-template-alist)
                template))
#+end_src

#+begin_src emacs-lisp
(defun company-org-block--expand (insertion)
  "Replace INSERTION with actual source block."
  (delete-region (point) (- (point) (1+ ;; Include "<" in length.
                                     (length insertion))))
  (if (company-org-block--template-p insertion)
      (company-org-block--wrap-point insertion
                                     ;; May be multiple words.
                                     ;; Take the first one.
                                     (nth 0 (split-string insertion)))
    (company-org-block--wrap-point (format "src %s" insertion)
                                   "src")))
#+end_src

#+begin_src emacs-lisp
(defun company-org-block--wrap-point (begin end)
  "Wrap point with block using BEGIN and END.  For example:
#+begin_BEGIN
  |
#+end_END"
  (insert (format "#+begin_%s\n" begin))
  (insert (make-string org-edit-src-content-indentation ?\s))
  ;; Saving excursion restores point to location inside code block.
  (save-excursion
    (insert (format "\n#+end_%s" end))))
#+end_src

#+begin_src emacs-lisp
(defun company-org-block--grab-symbol-cons ()
  "Return cons with symbol and t whenever prefix of < is found.
For example: \"<e\" -> (\"e\" . t)"
  (when (looking-back (if company-org-block-bol-p
                          (concat "^" company-org--regexp)
                        company-org--regexp)
                      (line-beginning-position))
    (cons (match-string-no-properties 1) t)))
#+end_src
 
#+begin_src emacs-lisp
(add-to-list 'company-backends 'company-org-block)
(company-mode +1)
#+end_src


** YaSnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+END_SRC

** Auto-Complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("<right>" . company-complete-common))
  :hook
  (after-init . global-company-mode)
  :custom
  (company-dabbrev-downcase nil)
  (company-idle-delay .2)
  (company-minimum-prefix-length 2)
  (company-tooltip-limit 10)
  (company-show-numbers t)
  (company-require-match nil)
  (company-tooltip-align-annotations t)
  (company-tooltip-flip-when-above t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-company-mode 1)
#+END_SRC

** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (setq which-key-popup-type 'minibuffer)
  (setq which-key-frame-max-height 20)
  (which-key-mode +1))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package smex
  :bind
  ("M-x" . 'smex)
  ("M-X" . 'smex-major-mode-commands)
  :config
  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize))
#+END_SRC

** Crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)
	     ("C-c u" . crux-view-url)
	     ("C-c k" . crux-kill-other-buffers)
	     ("C-c i" . crux-ispell-word-then-abbrev)
	     ("C-x C-u" . crux-upcase-region)
	     ("C-x C-l" . crux-downcase-region)
	     ("C-c r" . crux-rename-file-and-buffer)
	     ("C-c D" . crux-delete-file-and-buffer)
	     ("C-k" . crux-smart-kill-line)))
#+END_SRC

** Abbrev
#+BEGIN_SRC emacs-lisp
(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/abbreviations.el")
(quietly-read-abbrev-file)
#+END_SRC


* Search

** Dictionary
#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

** Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate)
#+END_SRC

** Google-This
#+BEGIN_SRC emacs-lisp
(use-package google-this
  :config
  (google-this-mode 1))
#+END_SRC 


* Utilities
** cheatsheet
#+begin_src emacs-lisp
(require 'cheatsheet)
(global-set-key (kbd "C-x C-h") 'cheatsheet-show)
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'cheats
                      '(:key "C-x C-h" :description "Show Cheatsheet")
                      '(:key "C-q" :description "Close Cheatsheet"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'windows
                      '(:key "C-x o" :description "Goto other window")
                      '(:key "C-x w" :description "Delete Frame")
                      '(:key "C-x 5 2" :description "New Frame")
                      '(:key "C-x 3" :description "New window right")
                      '(:key "C-x 2" :description "New window below")
                      '(:key "C-x 1" :description "Close all but current window"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'buffers
                      '(:key "C-x b" :description "Switch to buffer")
                      '(:key "C-x b named" :description "Create named buffer")
                      '(:key "C-x 4 b name" :description "Create in other window")
                      '(:key "C-x b" :description "Buffer menu")
                      '(:key "C-x k" :description "Kill buffer")
                      '(:key "C-c r" :description "Rename file and buffer")
                      '(:key "C-c D" :description "Delete file and buffer")
                      '(:key "C-c i" :description "iMenu"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'neotree
                      '(:key "F8" :description "Neotree toggle"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'bookmarks
                      '(:key "C-x C-b" :description "helm bookmark")
                      '(:key "C-f2" :description "marks toggle")
                      '(:key "f2" :description "marks next")
                      '(:key "S-f2" :description "marks previous"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'moves
                      '(:key "C-f" :description "Forward Character")
                      '(:key "C-b" :description "Back Character")
                      '(:key "M-f" :description "Forward Word")
                      '(:key "M-b" :description "Back Word")
                      '(:key "M-a" :description "Forward Sentence")
                      '(:key "M-e" :description "Back Sentence")
                      '(:key "C-n" :description "Next Line")
                      '(:key "C-p" :description "Previous Line")
                      '(:key "C-a" :description "Beginning of Line")
                      '(:key "C-e" :description "End of Line")
                      '(:key "M-v" :description "Move by Screen")
                      '(:key "C-x ]" :description "Top of Buffer")
                      '(:key "C-x [" :description "Bottom of Buffer")
                      '(:key "C-x l" :description "Center Screen Here")
                      '(:key "C-c o" :description "Occur"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'transform
                      '(:key "C-c i" :description "ispell word then abbrev")
                      '(:key "C-x C-u" :description "Uppercase")
                      '(:key "C-x C-l" :description "Lowercase")
                      '(:key "C-c M-3" :description "insert section symbol")
                      '(:key "C-c M-4" :description "insert contra symbol"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'files
                      '(:key "C-x C-f" :description "Find File")
                      '(:key "C-x C-s" :description "Save File")
                      '(:key "C-x C-r" :description "Recent Files")
                      '(:key "C-x i" :description "Insert File")
                      '(:key "C-c u" :description "View url")
                      '(:key "C-c R" :description "Register"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'edits 
                      '(:key "M-y" :description "Show kill ring")
                      '(:key "C-y" :description "Yank (Paste)")
                      '(:key "M-w" :description "Copy")
                      '(:key "C-w" :description "Cut")
                      '(:key "C-k" :description "Kill line")
                      '(:key "C-_" :description "Undo")
                      '(:key "M-_" :description "Redo"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'git
                      '(:key "C-x C-d" :description "Browse project")
                      '(:key "C-x r p" :description "Projects history"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'pdftools
                      '(:key "h" :description "highlight")
                      '(:key "t" :description "text")
                      '(:key "D" :description "delete")
                      '(:key "<return>" :description "edit annotation")
                      '(:key "<S-return>" :description "newline")
                      '(:key "C-s" :description "search forward"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'orgmode
                      '(:key "C-c c" :description "Org Capture Menu")
                      '(:key "C-c a" :description "Org Agenda Menu")
                      '(:key "C-c l" :description "Org Store Link")
                      '(:key "C-c $" :description "Archive to file")
                      '(:key "M-r" :description "org-rifle"))
#+end_src

#+begin_src emacs-lisp
(cheatsheet-add-group 'utils
                      '(:key "C-c s" :description "Engine Mode Prefix")
                      '(:key "M-x n" :description "Side notes toggle")
                      '(:key "C-c /" :description "poporg")
                      '(:key "M-return" :description "Comment"))
#+end_src

** engine-mode
#+begin_src emacs-lisp
(require 'engine-mode)
(engine-mode t)
(setq engine/browser-function 'eww-browse-url)
(engine/set-keymap-prefix (kbd "C-c s"))
#+end_src

#+begin_src emacs-lisp
(defengine github
  "https://github.com/search?ref=simplesearch&q=%s")
(defengine ctan
  "http://www.ctan.org/search/?x=1&PORTAL=on&phrase=%s"
  :docstring "Search the Comprehensive TeX Archive Network (ctan.org)")
(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")
(defengine google-images
  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")
(defengine google-maps
  "http://maps.google.com/maps?q=%s"
  :docstring "Mapssss")
(defengine project-gutenberg
  "http://www.gutenberg.org/ebooks/search/?query=%s")
(defengine rfcs
  "http://pretty-rfc.herokuapp.com/search?q=%s")
(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s")
(defengine twitter
  "https://twitter.com/search?q=%s")
(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w")
(defengine wiktionary
  "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")
(defengine wolfram-alpha
  "http://www.wolframalpha.com/input/?i=%s")
(defengine youtube
  "http://www.youtube.com/results?aq=f&oq=&search_query=%s")
(defengine seasoned-advice
  "https://cooking.stackexchange.com/search?q=%s")
(defengine mathematics
  "https://math.stackexchange.com/search?q=%s")
(defengine englang
  "https://english.stackexchange.com/search?q=%s")
(defengine linux
  "https://unix.stackexchange.com/search?q=%s")
(defengine infosec
  "https://security.stackexchange.com/search?q=%s")
(defengine cryptography
  "https://crypto.stackexchange.com/search?q=%s")
(defengine history
  "https://history.stackexchange.com/search?q=%s")
(defengine mathoverflow
  "https://mathoverflow.net/search?q=%s")
(defengine emacs
  "https://emacs.stackexchange.com/search?q=%s")
(defengine law
  "https://law.stackexchange.com/search?q=%s")
(defengine politics
  "https://politics.stackexchange.com/search?q=%s")
(defengine tcs
  "https://cstheory.stackexchange.com/search?q=%s")
(defengine merck
  "https://www.merckmanuals.com/professional/SearchResults?query=%s")
(defengine rosettacode
  "http://rosettacode.org/mw/index.php?title=Special%3ASearch&search=%s")
(defengine arxiv
  "https://arxiv.org/search/?query=%s")
(defengine citeseerx
  "https://citeseerx.ist.psu.edu/search?q=%s")
(defengine dblp
  "https://dblp.org/search?q=%s")
(defengine semanticscholar
  "https://www.semanticscholar.org/search?q=%s")
(defengine worldcat
  "https://www.worldcat.org/search?q=%s")
(defengine scholarpedia
  "http://www.scholarpedia.org/w/index.php?search=%s")
(defengine mathency
  "https://encyclopediaofmath.org/index.php?title=Special%3ASearch&search=%s")
(defengine mathworld
  "https://mathworld.wolfram.com/search/?query=%s")
(defengine oeis
  "https://oeis.org/search?q=%s")
(defengine nlab
  "https://www.google.com/search?as_q=%s&as_sitesearch=https%3A%2F%2Fncatlab.org%2Fnlab%2F")
(defengine sep
  "https://plato.stanford.edu/search/searcher.py?query=%s")
(defengine ballotpedia
  "https://ballotpedia.org/wiki/index.php?search=%s")
(defengine foldoc
  "https://foldoc.org/%s")
(defengine etymolonline
  "https://www.etymonline.com/search?q=%s")
(defengine jurispedia
  "http://www.jurispedia.org/index2.php?cof=FORID%3A11&ie=UTF-8&q=%s")
(defengine wikibooks
  "https://en.wikibooks.org/wiki/Special:Search?search=%s")
(defengine wikidata
  "https://www.wikidata.org/w/index.php?search=sseech&search=%s")
(defengine wikicommons
  "https://commons.wikimedia.org/w/index.php?search=%s")
(defengine wikinews
  "https://en.wikinews.org/wiki/Special:Search?search=%s")
(defengine wikiquote
  "https://en.wikiquote.org/wiki/Special:Search?search=%s")
(defengine wikisource
  "https://wikisource.org/w/index.php?search=%s")
(defengine wikiversity
  "https://en.wikiversity.org/wiki/Special:Search?search=%s")
(defengine wikitionary
  "https://en.wiktionary.org/wiki/Special:Search?search=%s")
#+end_src

** gitignore-templates
#+begin_src emacs-lisp
(require 'gitignore-templates)
(setq gitignore-templates-api 'github)
#+end_src

** git-gutter-fringe
Enable global minor mode

#+begin_src emacs-lisp
(require 'git-gutter)
(global-git-gutter-mode +1)
(global-set-key (kbd "C-x C-g") 'git-gutter)
(global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)
(global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
(global-set-key (kbd "C-x n") 'git-gutter:next-hunk)
(global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
(global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
(add-to-list 'git-gutter:update-hooks 'focus-in-hook)
#+end_src

** git-autocommit-mode
#+begin_src emacs-lisp
(require 'git-auto-commit-mode)
(setq-default gac-automatically-push-p t)
#+end_src

** org-attach-git
#+begin_src emacs-lisp
(require 'org-attach-git)
#+end_src

** helm-github-stars
#+begin_src emacs-lisp
(require 'helm-github-stars)
(setq helm-github-stars-username "pathologicalhandwaving")
(setq helm-github-stars-refetch 10.0)
(setq helm-github-stars-name-length 17)
#+end_src

** rfc-mode
#+begin_src emacs-lisp
(use-package rfc-mode
  :init
  (setq rfc-mode-directory (expand-file-name "~/Librarian/Dictionary/RFCs/")
        rfc-mode-index-path (concat rfc-mode-directory "rfc-index.org")))
#+end_src

** Bookmarks
#+BEGIN_SRC emacs-lisp
(use-package ebuku)
#+END_SRC

*** bm visible bookmarks
#+BEGIN_SRC emacs-lisp
(use-package bm
  :bind (("<C-f2>" . bm-toggle)
         ("<f2>" . bm-next)
	       ("<S-f2>" . bm-previous)))
#+END_SRC

*** Helm-bookmarks
#+begin_src emacs-lisp
(with-eval-after-load 'helm)
(require 'helm-bookmark)
(global-set-key (kbd "C-x C-b") 'helm-bookmark)
#+end_src

*** eBuku
#+begin_src emacs-lisp
(setq ebuku-buku-path "/usr/local/bin/buku")
(setq ebuku-database-path "/Users/emd/.local/share/buku/bookmarks.db")
#+end_src

** Kill
#+BEGIN_SRC emacs-lisp
(use-package easy-kill)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap kill-ring-save] 'easy-kill)
  (global-set-key [remap mark-sexp] 'easy-mark)
#+END_SRC

** Clipboard
Save current system clipboard to kill-ring
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** wttrin
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-cities '("Durham,NC")))
#+END_SRC

** AutoSave
#+begin_src emacs-lisp
(setq auto-save-default t)
#+end_src

Autosave every 30 seconds
#+begin_src emacs-lisp
(setq auto-save-timeout 30)
#+end_src

Auto save after 30 typed characters
#+BEGIN_SRC emacs-lisp
(setq auto-save-interval 30)
#+END_SRC

Autosaves in same place
#+begin_src emacs-lisp
(defvar emacs-autosave-directory
(concat user-emacs-directory "autosaves/"))
(unless (file-exists-p emacs-autosave-directory)
(make-directory emacs-autosave-directory))
#+end_src

** Backups
Set backups directory
#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,emacs-autosave-directory)))
#+end_src

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t)
(setq kept-new-versions 10)
(setq kept-old-versions 0)
(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
#+END_SRC

Backup after every save
#+begin_src emacs-lisp
(use-package backup-each-save
  :config (add-hook 'after-save-hook 'backup-each-save))
#+end_src

** Scratch Buffer
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

** Volatile Highlights
Temporarily highlight changes to buffer after pasting
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC

** Timers
#+begin_src emacs-lisp
(require 'chronos)
#+end_src

#+begin_src emacs-lisp
(use-package helm-chronos
  :ensure t
  :init (setq helm-chronos-standard-timers
              '("       5/Coffee"
                "       30/Shower"
                "       25/Email"
                "       27/Pom: Work + 7/Pom: Rest")))
#+end_src

** Alarm Clock
#+begin_src emacs-lisp
(require 'alarm-clock)
#+end_src

** Structure Templates
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC

** zen-mode
#+begin_src emacs-lisp
(require 'zen-mode)
#+end_src

** hypothesis

** outline-toc
#+begin_src emacs-lisp
(require 'outline-toc)
#+end_src

** side-notes
#+begin_src emacs-lisp
(require 'side-notes)
(global-set-key (kbd "M-s n") #'side-notes-toggle-notes)
#+end_src

** reddit

#+begin_src emacs-lisp
(require 'md4rd)
(add-hook 'md4rd-mode-hook 'md4rd-indent-all-the-lines)
#+end_src

* Languages
  
** BibTeX


** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :custom (css-indent-offset 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :ensure nil
  :preface
  (defun bunny/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :mode ("\\.sass\\'" "\\.scss\\'")
  :hook (scss-mode . bunny/scss-set-comment-style))
#+END_SRC


** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC


** Colors
Colorize colors as text with their value
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :custom
  (rainbow-x-colors-major-mode-list '()))
#+END_SRC


** Comments
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("<M-return>" . comment-indent-new-line)
  :custom
  (comment-auto-fill-only-comments t)
  (comment-multi-line t))
#+END_SRC


** Diff
#+BEGIN_SRC emacs-lisp
(use-package ediff-wind
  :ensure nil
  :custom
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC


** HTML
HTML mode is defined in =sgml-mode.el=

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :preface
  (defun bunny/html-set-pretty-print-function ()
    (setq bunny/pretty-print-function #'sgml-pretty-print))
  :hook
  ((html-mode . bunny/html-set-pretty-print-function)
   (html-mode . sgml-electric-tag-pair-mode)
   (html-mode . sgml-name-8bit-mode)
   (html-mode . toggle-truncate-lines))
  :custom
  (sgml-basic-offset 2))
#+END_SRC


** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :preface
  (defun bunny/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :hook (json-mode . bunny/json-set-indent-level))
#+END_SRC


** LaTeX
*** LaTeX Path
#+begin_src emacs-lisp
(setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
(add-to-list 'exec-path "/Library/TeX/texbin/")
#+end_src

*** Highlight LaTeX in Org
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex bibtex))
#+END_SRC


** Lisp
#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
#+END_SRC


** OrgMode                                                         :orgmode:
*** Startup
#+begin_src emacs-lisp
(setq org-directory "~/OrgDB")
(setq org-default-notes-file (concat org-directory "/Notes/notes.org"))
#+end_src

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+END_SRC

**** Indented
#+begin_src emacs-lisp
(require 'org-indent)
(setq org-startup-indented t)
#+end_src

**** Truncated
#+begin_src emacs-lisp
(setq org-startup-truncated nil)
#+end_src

**** Folded
#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src

*** Calendar
#+begin_src emacs-lisp
(require 'org-gcal)
(setq org-gcal-client-id "665892281799-neavl78mkd8v47ng50dpdanii7j42rkv.apps.googleusercontent.com"
      org-gcal-client-secret "G3-17CMyU-2x3oCDP-I40ZTO"
      org-gcal-fetch-file-alist '(("kms.orgsync@gmail.com" ~/OrgDB/Inbox/agenda.org")
                                  ("kms.orgsync@gmail.com" ~/OrgDB/Inbox/todos.org")))
#+end_src
*** Archives
Archives are stored in =~/OrgDB/Archive=
#+begin_src emacs-lisp
(setq org-archive-location "~/OrgDB/Archive/agenda.org_archive::datetree/* Completed Tasks")
#+end_src

*** Babel
**** TODO Add plantuml path

 =(setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.3/libexec/plantuml.jar")=

*** Capture
#+begin_src emacs-lisp
(defun bun-create-notes-file ()
"Create an org file in ~/OrgDB/Notes."
  (interactive)
  (let ((name (read-string "File Name: ")))
    (expand-file-name (format "%s.org" name) "~/OrgDB/Notes/")))
#+end_src

#+begin_src emacs-lisp
(setq org-capture-templates
  '(("t" "ToDo" entry (file+headline "~/OrgDB/Inbox/todos.org" "ToDos")
     "** TODO %?\n")
    ("a" "Appointment" entry (file+headline "~/OrgDB/Inbox/agenda.org" "Appointments")
     "** APPOINTMENT %?\n" :empty-lines 1)
    ("c" "Cookbook" entry (file "~/OrgDB/Chef/cookbook.org")
     "** %^{Recipe Title: }\n   :PROPERTIES:\n   :URL:\n   :SERVINGS:\n   :PREP_TIME:\n   :COOK_TIME:\n  :END:\n*** Ingredients\n    %?\n*** Directions\n\n" :empty-lines 1)
    ("n" "Note" entry (file+headline "~/OrgDB/Notes/notes.org" "Notes")
     "** NOTE %x\n   :PROPERTIES:\n   :DATE: %U\n   :END:\n" :empty-lines 1)
    ("i" "Dictionary" entry (file+headline "Dictionary")
     "*** <<<%^{Term}>>> :: \n    :PROPERTIES:\n    :CATEGORY: %^{Index Letter}\n    :TAGS: %g\n    :END:\n    %^{Description}" :empty-lines 1)
    ("l" "Log" entry (file+datetree "~/OrgDB/Logs/log.org")
     "* %U: %^{Task Completed} %^g")
    ("d" "ADHD Log" entry (file+datetree "~/OrgDB/ADHD/log.org")
    "* %U : %^{Description}\n - %?")
    ("h" "Hyperfocus Log" entry (file+datetree "~/OrgDB/ADHD/hyperfocus-log.org")
     "* %U: \n - Behavior: %^{What did hyperfocus behavior look like?}\n - What: %^{What did I focus on?}\n - Duration: %^{How long did it last?}\n - Where: %^{Location occured?}\n - Known: %^{During the episode was I aware I was hyperfocused?}\n - Breaks: %^{Did I take any breaks?}\n - Thoughts: %^{What thoughts did I have after?}\n - Physical: %^{Physical symptoms after?}\n - Satisfaction: %^{From 1-10 how satisfied am I with what I did?}")
    ("e" "Census Log" entry (file+datetree "~/OrgDB/Work/Census/2020/log.org")
     "* %U: %^{Action}\n - %?")))
#+end_src

*** Links
#+begin_src emacs-lisp
(setq org-descriptive-links t)
#+end_src

*** Refile
*** Org-Chef
Recipes are stored in =~/OrgDB/Chef=
#+begin_src emacs-lisp
(use-package org-chef
  :ensure t)
#+end_src

*** Grammar and Spelling
**** Dont spell check these regions

 #+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
 #+END_SRC

*** Layout

**** List Markers
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "โข"))))))
#+end_src

**** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

**** Modify demote bullets
 #+BEGIN_SRC emacs-lisp
(setq org-list-demote-modify-bullet '(("-" . "+")
                                      ("+" . "*")
				      ("*" . "-")))
 #+END_SRC

**** hide emphasis markers
 #+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
 #+END_SRC

**** org-src block fontify
 #+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 2)
(setq org-src-preserve-indentation t)
 #+END_SRC

**** fontify headlines
 #+BEGIN_SRC emacs-lisp
(setq org-fontify-whole-headline t)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
(setq org-fontify-done-headline t)
 #+END_SRC

**** fontify quote and verse blocks
 #+BEGIN_SRC emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)
 #+END_SRC

**** Maximize description list indent
 #+BEGIN_SRC emacs-lisp
(setq org-list-description-max-indent 5)
 #+END_SRC

**** Checkbox Stats
#+begin_src emacs-lisp
(setq org-checkbox-hierarchical-statistics nil)
#+end_src

*** Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
	      (sequence "FIXME" "|" "FIXED")
        (sequence "ADD" "|" "ADDED")
        (sequence "REMOVE" "|" "REMOVED")
        (sequence "MOVE" "|" "MOVED")))
#+end_src

*** Agenda
Agenda is stored in =~/OrgDB/Inbox=

**** Warn if deadline within next 7 days
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 7)
#+END_SRC

**** Show all tasks due in next two weeks
#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 7)
#+END_SRC

**** Dont show tasks as scheduled if they are categorized with a deadline
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
#+END_SRC

**** Priority 
 #+BEGIN_SRC emacs-lisp
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)
 #+END_SRC

*** Logs
Logs are stored in =~/OrgDB/Logs=

*** Org Files

default org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory '("/Users/emd/OrgDB"))
#+END_SRC

Agenda file

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/OrgDB/Inbox/todos.org" "~/OrgDB/Inbox/agenda.org" "~/OrgDB/Inbox/inbox.org"))
#+END_SRC

Notes file

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file '("~/OrgDB/Notes/notes.org"))
#+END_SRC

*** Refile
#+begin_src emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path '(file))
#+end_src

*** Utilities
**** PopOrg
 #+BEGIN_SRC emacs-lisp
(use-package poporg
  :bind (("C-c /" . poporg-dwim)))
 #+END_SRC

**** sidebar
#+begin_src emacs-lisp
(require 'org-sidebar)
(require 'org-ql)
#+end_src

**** org-download
#+begin_src emacs-lisp
(require 'org-download)
(setq-default org-download-image-dir "~/OrgDB/Notes")
#+end_src

**** org-crypt

**** org-web-tools
#+begin_src emacs-lisp
(require 'org-web-tools)
#+end_src

**** org-kanban
#+begin_src emacs-lisp
(require 'org-kanban)
#+end_src

*** Reference
I store my books, papers, and reference files in =~/Librarian=
 
**** org-books
#+begin_src emacs-lisp
(require 'org-books)
(setq org-books-file '("~/Librarian/index.org"))
#+end_src

***** Adding new source
A source for books provide a details function that takes certain input (like a url in case of amazon) and returns a list of title, author and props. 
props is an alist which gets added to the entry as org properties. Here is the output from amazonโs:

=(print (org-books-get-details-amazon "https://www.amazon.in/Algebra-Chapter-Graduate-Studies-Mathematics/dp/0821847813/"))=

=("Algebra: Chapter 0 (Graduate Studies in Mathematics)" "Paolo Aluffi" (("AMAZON" . "https://www.amazon.in/Algebra-Chapter-Graduate-Studies-Mathematics/dp/0821847813/")))=

With the details function defined, you need to write the url pattern it accepts and add it to the variable =org-books-url-pattern-dispatches=. 

Check variableโs docstring for more details.

As of now there are the following sources:

- Manual (input: title, author etc.)
- Amazon (input: url)
- Goodreads (input: url)
- Openlibrary (input: url)
- ISBN (input: ISBN, dispatches openlibrary url source)
***** Capture

#+begin_verse
(setq org-capture-templates
      '(("b" "Book" entry (file "some-file.org")
         "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{AUTHOR}p\n%?" :empty-lines 1)))
#+end_verse

#+begin_verse
(setq org-capture-templates
      '(("b" "Book" entry (file "some-file.org")
         "%(let* ((url (substring-no-properties (current-kill 0)))
                  (details (org-books-get-details url)))
             (when details (apply #'org-books-format 1 details)))")))
#+end_verse


- To add books manually, use =org-books-add-book function=.
- To add from urls, call =org-books-add-url= (or use =org-books-cliplink= if url is in clipboard).
- To give ratings, go to the entry and call =org-books-rate-book=.
- While filing a book, =org-books-file-depth= tells which headings are to be considered as a category (like fiction or something).
- =org-books-add-to-top= (default t) tells whether to add the book at the top or bottom under the selected heading.

**** org-ref
#+begin_src emacs-lisp
(require 'org-ref)
(setq reftex-default-bibliography '("~/Librarian/Bibliography/default.bib"))
(setq org-ref-bibliography-notes '("~/Librarian/Annotations/annotations.org"))
(setq org-ref-default-bibliography '("~/Librarian/Bibliography/default.bib"))
(setq org-ref-pdf-directory '("~/Librarian/PDFs"))
#+end_src

**** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :ensure t
  :after org
  :config
  (setq org-noter-default-notes-file-names '("~/Librarian/Annotations/annotations.org")
        org-noter-notes-search-path '("~/Librarian/Annotations"))
  (setq org-noter-separate-notes-from-heading t))
#+end_src

***** org-noter and org-ref
Add reference from org-ref cite-link interface =C-c j= and then open with pdf-tools package.
For files with multiple refs jump to notes using the following funtion:
#+begin_src emacs-lisp
(defun org-ref-note-at-point ()
  "Open odf for citekey under point if exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
        (progn
          (find-file-other-window pdf-file)
          (org-noter))
      (message "No pdf found for %s" key))))
(add-to-list 'org-ref-helm-user-candidates
             '("Annotations" . org-ref-note-at-point))
#+end_src

**** helm-bibtex
#+begin_src emacs-lisp
(require 'helm-bibtex)
(setq bibtex-completion-bibliography "~/Librarian/Bibliography/default.bib")
(setq bibtex-completion-library-path "~/Librarian/PDFs")
(setq bibtex-completion-notes-path "~/Librarian/Annotations")
#+end_src

***** INPROGRESS Citekey Format
The format I prefer for my citekeys is =[LastYear]=
Where =Last= is the surname of the author, and =Year= is the four digit year of the publication. 
If the author has more than one publication in a year then the letters =a, b, c= are added to each successive cited publication. For example, =[Harvey2001]=
=[Harvey2001a]=
=[Harvey2001b]=
Are the publications by Harvey that I have listed in my bibliography for the year of 2001.

**** doi-utils
The following text is from the org-ref documentation for =doi-utils=

Provides two commands:

- =doi-utils-add-bibtex-entry-from-doi=
This will prompt you for a DOI, and a bibtex file, and then try to get the bibtex entry, and pdf of the article.

- =doi-utils-add-entry-from-crossref-query=
This will prompt you for a query string, which is usually the title of an article, or a free-form text citation of an article. 
Then you will get a helm buffer of matching items, which you can choose from to insert a new bibtex entry into a bibtex file.

This library also redefines the org-mode doi link. Now, when you click on this link you will get a menu of options, e.g. to open a bibtex entry or a pdf if you have it, or to search the doi in some scientific search engines. 

***** Troubleshooting doi-utils
Occasionally weird things happen with a DOI. 

The first thing you should check is if the json data for the DOI can be retrieved. You can do that at the command line, or in a sh block like this:

=curl -LH "Accept: application/citeproc+json" "http://doi.org/10.1021/jp511426q"=

If you do not get json data, doi-utils will not be able to generate the bibtex entry.

*Not all PDFs can be retrieved.* doi-utils uses a set of functions to attempt this.

=doi-utils-pdf-url-functions=

You can check if a url for the PDF can be found like this:
=(doi-utils-get-pdf-url "10.1021/jp511426q")=

#+begin_src emacs-lisp
(require 'doi-utils)
#+end_src

**** pdf-tools
Favorite pdf annotation tool

#+begin_src emacs-lisp
(defun bun-save-buffer-no-args ()
  "Save buffer ignoring arguments."
  (save-buffer))
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :pin manual
  :ensure t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
  (setq pdf-view-resize-factor 1.1)
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
  (with-eval-after-load "pdf-annot"
    (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<return>") 'pdf-annot-edit-contents-commit)
    (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<S-return>") 'newline)
    (advice-add 'pdf-annot-edit-contents-commit :after 'bun-save-buffer-no-args)))
#+END_SRC

***** Troubleshooting PDF-Tools
If =(pdf-tools-install)= does not find libffi on macOS, try:
#+begin_verse
(setenv "PKG_CONFIG_PATH"
        (f-join
         (file-name-as-directory
          (nth 0
               (split-string
                (shell-command-to-string "brew --prefix"))))
         "Cellar" "libffi" "3.2.1" "lib" "pkgconfig"))
#+end_verse
I set my pkgconfig path in my =.bash_profile= and had no issues with this version of Emacs, however =pdf-tools= was broken for me in the stable version.

**** org-pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package org-pdftools
  :hook (org-load . org-pdftools-setup-link))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC

**** pdf-tools-org
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/pdf-tools-org.el")
(require 'pdf-tools-org)
(add-hook 'after-save-hook
          (lambda ()
            (when (eq major-mode 'pdf-view-mode) (pdf-tools-org-export-to-org))))
#+end_src


** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :hook (python-mode . turn-on-prettify-symbols-mode))
#+END_SRC



** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'"))
#+END_SRC
