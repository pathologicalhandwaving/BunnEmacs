#+TITLE: BunnEmacs
#+AUTHOR: Kris Short
#+DATE_CREATED: [2020-07-06]
#+DATE_MODIFIED: [2020-07-11]


* Load Files
** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Load =.secrets.el=


#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name "secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC


** =BIBINPUTS=
   The following environment variable is set in =~/.exports=
   =BIBINPUTS=/Users/emd/Librarian/Bibliography/default.bib=
   =export BIBINPUTS=
 

* Startup Options
** User
*** Name
   #+begin_src emacs-lisp
   (setq user-full-name "K. M. Short")
   #+end_src
*** Email
    #+begin_src emacs-lisp
    (setq user-mail-address "kristimshort@icloud.com")
    #+end_src

** Startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Bar Modes
*** Enable modes
 #+BEGIN_SRC emacs-lisp
 (menu-bar-mode +1)
 (tool-bar-mode -1)
 (tooltip-mode +1)
 #+END_SRC

*** Scroll-bar Mode
 #+BEGIN_SRC emacs-lisp
 (scroll-bar-mode -1)
 (setq scroll-margin 3
       scroll-conservatively 10000
       scroll-preserve-screen-position 1)
 #+END_SRC

*** SideNotes
    #+begin_src emacs-lisp
    (use-package side-notes)
    #+end_src

** Buffers
*** Indicate Size of Buffer
  #+BEGIN_SRC emacs-lisp
  (size-indication-mode t)
  #+END_SRC

** Indicators
*** Highlight Current Line
  #+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-hl-line-mode)
  #+END_SRC

*** Line Numbers
 #+BEGIN_SRC emacs-lisp
 (line-number-mode +1)
 (global-display-line-numbers-mode 1)
 (column-number-mode t)
 #+END_SRC

*** Yes-or-No
 #+BEGIN_SRC emacs-lisp
 (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

*** Large File Warning
 #+BEGIN_SRC emacs-lisp
 (setq large-file-warning-threshold 100000000)
 #+END_SRC

** Wrapping
*** Wrap at edge of screen
  #+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
  #+END_SRC

** Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
#+END_SRC

** Garbage Collection
*** If not in focus, garbage collect
  #+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
  #+END_SRC

** Paths
*** Exec Path From Shell
 #+BEGIN_SRC emacs-lisp
 (use-package exec-path-from-shell
   :config
   (exec-path-from-shell-initialize))
 #+END_SRC

*** External Paths
**** TODO Add plantuml path
 =(setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.3/libexec/plantuml.jar")=

** File Extentions and modes
*** Initial Major Mode
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

*** Major Mode uses File Extension
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
 #+END_SRC



* Languages
  
** BibTeX
*** RefTeX
    #+begin_src emacs-lisp
      (use-package reftex
	:commands turn-on-reftex
	:init
	(progn
	  (setq reftex-default-bibliography '("~/Librarian/Bibliography/default.bib"))
	  (setq reftex-plug-intoAUCTex t)))
    #+end_src

*** Org-Ref
**** Defaults
     #+begin_src emacs-lisp
       (use-package org-ref
	 :after org
	 :init
	 (setq reftext-default-bibliography '("~/Librarian/Bibliography/default.bib"))
	 (setq org-ref-default-bibliography '("~/Librarian/Bibliography/default.bib")
	       org-ref-pdf-directory "~/Librarian/PDFs"))
     #+end_src

**** Default Citation Type
     #+begin_src emacs-lisp
     (setq org-ref-default-citation-link "cite")
     #+end_src

**** Helm biblatex
     #+begin_src emacs-lisp
     (use-package helm-bibtex
       :config
       (setq bibtex-completion-bibliography "~/Librarian/Bibliography/default.bib"
	     bibtex-completion-library-path "~/Librarian/PDFs"))
     #+end_src


** CSS

 #+BEGIN_SRC emacs-lisp
 (use-package css-mode
   :ensure nil
   :custom (css-indent-offset 2))
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
 (use-package scss-mode
   :ensure nil
   :preface
   (defun bunny/scss-set-comment-style ()
     (setq-local comment-end "")
     (setq-local comment-start "//"))
   :mode ("\\.sass\\'" "\\.scss\\'")
   :hook (scss-mode . bunny/scss-set-comment-style))
 #+END_SRC


** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC


** Colors
Colorize colors as text with their value
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :custom
  (rainbow-x-colors-major-mode-list '()))
#+END_SRC


** Comments
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("<M-return>" . comment-indent-new-line)
  :custom
  (comment-auto-fill-only-comments t)
  (comment-multi-line t))
#+END_SRC


** Diff
#+BEGIN_SRC emacs-lisp
(use-package ediff-wind
  :ensure nil
  :custom
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC


** HTML
HTML mode is defined in =sgml-mode.el=

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :preface
  (defun bunny/html-set-pretty-print-function ()
    (setq bunny/pretty-print-function #'sgml-pretty-print))
  :hook
  ((html-mode . bunny/html-set-pretty-print-function)
   (html-mode . sgml-electric-tag-pair-mode)
   (html-mode . sgml-name-8bit-mode)
   (html-mode . toggle-truncate-lines))
  :custom
  (sgml-basic-offset 2))
#+END_SRC


** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :preface
  (defun bunny/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :hook (json-mode . bunny/json-set-indent-level))
#+END_SRC


** LaTeX
*** =ox-latex=
    #+begin_src emacs-lisp
    (require 'ox-latex)
    #+end_src

*** PDF Process
    #+begin_src emacs-lisp
    (setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    #+end_src

*** File Extensions
    #+begin_src emacs-lisp
    (setq org-latex-logfiles-extensions '(("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "bld" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle")))
    #+end_src

*** Highlight LaTeX in Org
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex bibtex))
#+END_SRC

*** =org-latex-classes=
    #+begin_src emacs-lisp
    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil))
    (add-to-list 'org-latex-classes
                    '("article"
		      "\\documentclass{article}"
		      ("\\section{%s}" . "\\section*{%s}")
		      ("\\subsection{%s}" . "\\subsection*{%s}")
		      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		      ("\\paragraph{%s}" . "\\paragraph*{%s}")
		      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    #+end_src

*** Org LaTeX Default Packages List
    #+begin_src emacs-lisp
    (setq '(org-latex-default-packages-alist
            '(("utf8" "inputenc" t
	       ("pdflatex"))
	      ("T1" "fontenc" t
	       ("pdflatex"))
	      ("" "graphix" t nil)
	      ("" "xcolor" t nil)
	      ("" "grffile" t nil)
	      ("" "longtable" nil nil)
	      ("" "wrapfig" nil nil)
	      ("" "rotating" nil nil)
	      ("normalem" "ulem" t nil)
	      ("" "amsmath" t nil)
	      ("" "amssymb" t nil)
	      ("" "stmaryrd" t nil)
	      ("" "fontawesome" t nil)
	      ("" "fullpage" t nil)
	      ("" "textcomp" t nil)
	      ("" "caption" nil nil)
	      ("parfill" "parskip" t t)
	      ("none" "hyphenat" t t)
	      ("" "listings" nil nil)
	      ("" "booktabs" nil nil))))
    #+end_src
	     

** Lisp
#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
#+END_SRC


** OrgMode
*** Startup
**** Startup with Aligned Tables
     #+begin_src emacs-lisp
     (setq org-startup-align-all-tables t)
     #+end_src
**** Startup Folded
     #+begin_src emacs-lisp
     (setq org-startup-folded t)
     #+end_src
**** Startup Indented
     #+begin_src emacs-lisp
     (setq org-startup-indented t)
     #+end_src
**** Startup with Inline Images
     #+begin_src emacs-lisp
     (setq org-startup-with-inline-images t)
     #+end_src
**** Startup with LaTeX Preview
     #+begin_src emacs-lisp
     (setq org-startup-with-latex-preview t)
     #+end_src
**** Return Follows Link
     #+begin_src emacs-lisp
     (setq org-return-follows-link t)
     #+end_src

*** Yank
**** Yank Adjusted Subtrees
     #+begin_src emacs-lisp
     (setq org-yank-adjusted-subtrees t)
     #+end_src

**** Yank Folded Subtrees
     #+begin_src emacs-lisp
     (setq org-yank-folded-subtrees t)
     #+end_src
**** Catch Invisible Edits
     #+begin_src emacs-lisp
     (setq org-catch-invisible-edits 'error)
     #+end_src

*** Org Files
**** default directory
   #+BEGIN_SRC emacs-lisp
   (setq org-directory "/Users/emd/OrgDB")
   #+END_SRC

**** Agenda file
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (list org-directory))
   #+END_SRC

**** Notes file
   #+BEGIN_SRC emacs-lisp
   (setq org-default-notes-file (concat org-directory "/Notes/notes.org"))
   #+END_SRC
*** Org Keywords
    #+begin_src emacs-lisp
    (setq org-todo-keywords 
          '((sequence "FIXME" | "FIXED")))
    #+end_src

**** Org Keyword Faces
     #+begin_src emacs-lisp
     (setq org-todo-keyword-faces
           '((("FIXME" . org-warning) ("FIXED" . "black"))))
     #+end_src
*** Org Properties
*** Spelling and Grammar
**** Dont spell check these regions
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
  #+END_SRC

**** Sentence does not need a double space on the end
     #+begin_src emacs-lisp
     (setq sentence-end-double-space nil)
     #+end_src

**** Subscripts and Superscripts
     #+begin_src emacs-lisp
     (setq org-use-sub-superscripts '{})
     #+end_src

*** Fontify
**** FIXME hide emphasis markers
   #+BEGIN_SRC emacs-lisp
   (setq org-hide-emphasis-markers t)
   #+END_SRC

**** fontify headlines
   #+BEGIN_SRC emacs-lisp
   (setq org-fontify-whole-headline t)
   #+END_SRC

**** org fontify done headline
   #+BEGIN_SRC emacs-lisp
   (setq org-fontify-done-headline t)
   #+END_SRC

**** fontify quote and verse blocks
   #+BEGIN_SRC emacs-lisp
   (setq org-fontify-quote-and-verse-blocks t)
   #+END_SRC

**** Modify demote bullets
 #+BEGIN_SRC emacs-lisp
 (setq org-list-demote-modify-bullet '(("-" . "+")
                                       ("+" . "*")
				       ("*" . "-")))
 #+END_SRC

**** org-src block fontify
   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   (setq org-src-tab-acts-natively t)
   (setq org-edit-src-content-indentation 0)
   (setq org-src-preserve-indentation t)
   #+END_SRC

*** File Layout
**** toc-org
     #+begin_src emacs-lisp
     (use-package toc-org
       :config
       (add-hook 'org-mode-hook 'toc-org-enable))
     #+end_src

**** Maximize description list indent
   #+BEGIN_SRC emacs-lisp
   (setq org-list-description-max-indent 5)
   #+END_SRC

**** org-bullets
     #+begin_src emacs-lisp
     (use-package org-bullets
       :init
       (org-bullets-mode +1))
     #+end_src

**** Cycle Plain Lists
     #+begin_src emacs-lisp
     (setq org-cycle-include-plain-lists t)
     #+end_src


*** Capture
    #+begin_src emacs-lisp
    (setq org-capture-templates
          '(("t" "TODO" entry (file "~/OrgDB/Inbox/inbox.org")
	     "* TODO %?" :empty-lines 1)
	    ("n" "Note" entry (file "~/OrgDB/Notes/notes.org")
	     "* NOTE %?" :empty-lines 1)))
    #+end_src

*** Agenda
**** Warn if deadline within next 7 days
 #+BEGIN_SRC emacs-lisp
 (setq org-deadline-warning-days 7)
 #+END_SRC

**** Show all tasks due in next two weeks
 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-span 7)
 #+END_SRC

**** Dont show tasks as scheduled if they are categorized with a deadline
 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
 #+END_SRC

*** Priority 
**** Set Priority Values
   #+BEGIN_SRC emacs-lisp
   (setq org-highest-priority ?A)
   (setq org-lowest-priority ?C)
   (setq org-default-priority ?A)
   #+END_SRC

*** Babel
  #+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  #+END_SRC

*** Extensions
**** PopOrg
   #+BEGIN_SRC emacs-lisp
   (use-package poporg
     :bind (("C-c /" . poporg-dwim)))
   #+END_SRC


** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :hook (python-mode . turn-on-prettify-symbols-mode))
#+END_SRC


** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'"))
#+END_SRC


* MacOS UI
** More Native UI
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(modify-frame-parameters (selected-frame) '((alpha . 75)))
(add-to-list 'default-frame-alist '(alpha 85 85))
#+END_SRC

** Meta
#+BEGIN_SRC emacs-lisp
(setq ns-function-modifer 'hyper)
#+END_SRC

** Swap meta and super
#+BEGIN_SRC emacs-lisp
(setq mac-option-modifer 'meta)
(setq mac-command-modifer 'super)
#+END_SRC


* Theme
** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind ("C-x n" . neotree-toggle)
  :config
  (setq neo-smart-open t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Default Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-neotree-config)
  (setq doom-neotree-enable-file-icons t)
  (setq doom-neotree-enable-chevron-icons t)
  (setq doom-neotree-enable-type-colors t)
  (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'doom-outrun-electric t)
#+END_SRC


** Nyan-Mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :init
  :config
  (nyan-mode t)
  (nyan-toggle-wavy-trail)
  (nyan-start-animation))
#+END_SRC

** Parens
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC


* Keybinds
** GoTo Next Window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x o") (lambda ()
                                (interactive)
				(other-window -1)))
#+END_SRC

** M-x without meta
   #+begin_src emacs-lisp
     (use-package helm
       :config
       (helm-mode 1))
   #+end_src

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t)
(setq helm-recentf-fuzzy-match t)
#+END_SRC

#+begin_src emacs-lisp
(use-package semantic
  :config
  (semantic-mode 1))
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-m") 'helm-semantic-or-imenu)
#+end_src

** Replace buffer menu with ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Symbol Insert
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c M-3") (lambda () (interactive) (insert "§")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c M-4") (lambda () (interactive) (insert "↯")))
#+END_SRC

** Delete Frame
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'delete-frame)
#+END_SRC

** Copy Mouse Selected Text Automatically
#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

** Orgmode Keybinds
*** agenda
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

*** capture
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC



* Help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :bind
  (:map help-mode-map
        ("<" . help-go-back)
        (">" . help-go-forward)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :config
  (global-eldoc-mode -1))
#+END_SRC


* Expand

** YaSnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+END_SRC


** Auto-Complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("<right>" . company-complete-common))
  :hook
  (after-init . global-company-mode)
  :custom
  (company-dabbrev-downcase nil)
  (company-idle-delay .2)
  (company-minimum-prefix-length 2)
  (company-tooltip-limit 10)
  (company-show-numbers t)
  (company-require-match nil)
  (company-tooltip-align-annotations t)
  (company-tooltip-flip-when-above t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-company-mode 1)
#+END_SRC


** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (setq which-key-popup-type 'minibuffer)
  (setq which-key-frame-max-height 20)
  (which-key-mode +1))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package smex
  :bind
  ("M-x" . 'smex)
  ("M-X" . 'smex-major-mode-commands)
  :config
  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize))
#+END_SRC


** Crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-c f" . crux-recentf-find-file)
	 ("C-c u" . crux-view-url)
	 ("C-c k" . crux-kill-other-buffers)
	 ("C-c i" . crux-ispell-word-then-abbrev)
	 ("C-x C-u" . crux-upcase-region)
	 ("C-x C-l" . crux-downcase-region)
	 ("C-c r" . crux-rename-file-and-buffer)
	 ("C-c D" . crux-delete-file-and-buffer)
	 ("C-k" . crux-smart-kill-line)))
#+END_SRC


** Abbrev
#+BEGIN_SRC emacs-lisp
(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/abbreviations.el")
(quietly-read-abbrev-file)
#+END_SRC


* Search
** Dictionary
#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

** Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate)
#+END_SRC

** Google-This
#+BEGIN_SRC emacs-lisp
(use-package google-this
  :config
  (google-this-mode 1))
#+BEGIN_SRC 


* Utilities
** AutoSave
*** Auto save after 30 typed characters
#+BEGIN_SRC emacs-lisp
(setq auto-save-interval 30)
#+END_SRC

*** Newline at end of file
  #+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
  #+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t)
(setq kept-new-versions 10)
(setq kept-old-versions 2)
(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
#+END_SRC

** Bookmarks
#+BEGIN_SRC emacs-lisp
(use-package ebuku)
#+END_SRC

*** bm visible bookmarks
#+BEGIN_SRC emacs-lisp
(use-package bm
  :bind (("<C-f2>" . bm-toggle)
         ("<f2>" . bm-next)
	 ("<S-f2>" . bm-previous)))
#+END_SRC
** Clipboard
Save current system clipboard to kill-ring
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** Ewww
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

** Kill
#+BEGIN_SRC emacs-lisp
(use-package easy-kill)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap kill-ring-save] 'easy-kill)
  (global-set-key [remap mark-sexp] 'easy-mark)
#+END_SRC

** PDFs
*** pdf-tools
 #+BEGIN_SRC emacs-lisp
 (use-package pdf-tools
   :pin manual
   :config
   (pdf-tools-install)
   (setq-default pdf-view-display-size 'fit-page)
   (setq pdf-annot-activate-created-annotations t)
   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
   (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
   (setq pdf-view-resize-factor 1.1)
   (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
   (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
   (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
   (with-eval-after-load "pdf-annot"
     (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<return>") 'pdf-annot-edit-contents-commit)
     (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<S-return>") 'newline)
     (advice-add 'pdf-annot-edit-contents-commit :after 'emd/save-buffer-no-args)))
 #+END_SRC

*** org-pdf-tools
 #+BEGIN_SRC emacs-lisp
 (use-package org-pdftools
   :hook (org-load . org-pdftools-setup-link))
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
 (use-package org-noter-pdftools
   :after org-noter
   :config
   (with-eval-after-load 'pdf-annot
     (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
 #+END_SRC

** Scratch Buffer
 #+BEGIN_SRC emacs-lisp
 (setq-default initial-scratch-message "")
 #+END_

** Structure Templates
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC

** Volatile Highlights
Temporarily highlight changes to buffer after pasting
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC

** wttrin
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-cities '("Durham,NC")))
#+END_SRC

